<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git系列之解决合并分支冲突</title>
    <url>/2018/06/08/Git1/</url>
    <content><![CDATA[<p>  在使用git时，通常会建立几个分支来管理不同环境的代码，通常会建立develop，test，master等几个分支来管理开发，测试，生产环境的代码。通常master分支固定一个版本，develop分支迭代开发新的功能，当开发完新的功能时将develop分支合并到test分支，将test分支的代码打包发布到测试服务器测试通过后再将test分支合并到master分支以更新正式生产环境新的版本。当然也可以建立管理其他分支，例如在测试服务器和正式服务器之间还需要灰度服务器来过渡，这时可以建立一个gray分支来管理灰度服务器的代码；也可以建立一个专门用来修复bug的分支，当生产环境出现bug时，开发人员从master分支新建一个temp分支，在temp分支上修复bug，当修复完成后再将temp分支合并回master分支。<br>  <span id="more"></span><br>  git鼓励大家多使用分支，在开发新的模块时每一个开发人员可以根据不同的模块以develop分支为基础来建立不同的分支，当开发完成时，再合并回develop分支。git的分支功能的确使得开发变得简单高效，但是分支之间的合并却并不简单，接下来所要介绍的便是一些合并分支出现冲突的解决办法。</p>
<h1 id="一-版本回退解决冲突"><a href="#一-版本回退解决冲突" class="headerlink" title="一:版本回退解决冲突"></a>一:版本回退解决冲突</h1><p>  在合并分支时，如果只是单纯地进行两个分支之间的合并，假如这时存在冲突只需要接受其中我们所需要的一个版本即可，这种冲突情况解决无疑很简单。但仍然有一些比较复杂的情况，如果单纯地接受其中一个版本无疑会越加混乱。最近在公司使用git进行多人开发时遇见了一种合并冲突情况，于是将解决办法记录下来，大致情况是：远程有test和develop分支，本地有test和develop分支，因为开发时所用分支为test分支所以想要将test分支合并到develop分支以后便切换到develop分支开发。所做操作如下：</p>
<ul>
<li>1 拉取分支test:<ul>
<li>git pull origin test</li>
</ul>
</li>
<li>2 切换到develop分支:<ul>
<li>git checkout develop</li>
</ul>
</li>
<li>3 合并分支test，有冲突接受test分支的版本:<ul>
<li>git merge test</li>
</ul>
</li>
<li>4 pull分支develop，有冲突并未检查直接add-&gt;commit-&gt;push:<ul>
<li>git pull origin develop</li>
<li>git add .</li>
<li>git commit -m “some message”</li>
<li>git push origin develop</li>
</ul>
</li>
</ul>
<blockquote>
<p>当合并两个分支时有冲突可以借助idea查看两个分支的区别。</p>
</blockquote>
<p>进过上诉操作，这时远程分支develop已经被污染，解决办法如果是选用修改有冲突的文件无疑浪费很多时间，这时可以使用git的回退功能，具体操作如下：</p>
<ul>
<li>1 在本地develop回退到合并test分支前一个版本:<ul>
<li>git reset HEAD~1</li>
</ul>
</li>
<li>2 使用-f选项将develop分支强制覆盖远程develop分支代码:<ul>
<li>git push origin develop -f</li>
</ul>
</li>
<li>3 重新拉取分支develop:<ul>
<li>git pull origin develop</li>
</ul>
</li>
<li>4 合并分支test,有冲突接受test分支的版本:<ul>
<li>git merge test</li>
</ul>
</li>
<li>5 push分支develop:<ul>
<li>git push origin develop</li>
</ul>
</li>
</ul>
<h1 id="二-使用git的储藏功能解决冲突"><a href="#二-使用git的储藏功能解决冲突" class="headerlink" title="二:使用git的储藏功能解决冲突"></a>二:使用git的储藏功能解决冲突</h1><p>git还有一个功能十分强大，就是储藏(stash)功能，储藏会将你所做的修改保存在栈中，这时你就可以切换到其他分支进行工作。在团队合作开发中当你在本地更改一些文件后想要将将他们推送到远程仓库时这时发现有冲突，因为可能有其他团队成员更改了相同的文件并且将其推送到了远程仓库，这时你再往远程分支必定会有冲突。这时就可以使用到git的储藏功能，具体操作如下:</p>
<ul>
<li>1 先将本地代码储藏下来:<ul>
<li>git stash</li>
</ul>
</li>
<li>2 将远程代码拉取下来:<ul>
<li>git pull origin develop</li>
</ul>
</li>
<li>3 恢复储藏的代码:<ul>
<li>git stash pop</li>
</ul>
</li>
<li>4 借助idea工具查看两个版本的区别，并决定接受哪个版本。</li>
</ul>
<p>因为储藏的版本和远程仓库版本会存在冲突，这时恢复储藏时就相当于合并两个分支会存在冲突。<br>git的储藏功能也十分好用，以下介绍一些相关命令:</p>
<blockquote>
<p>git stash:储藏 </br><br>  git stash pop:恢复最新的储藏</br><br>  git stash list:显示有哪些储藏</br><br>  git stash apply stashName:应用储藏stashName</p>
</blockquote>
  <center>持续更新中...
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2018/04/14/Hexo/</url>
    <content><![CDATA[<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><h2 id="一-Linux环境-Ubuntu"><a href="#一-Linux环境-Ubuntu" class="headerlink" title="一 :Linux环境(Ubuntu)"></a>一 :Linux环境(Ubuntu)</h2><p>安装hexo博客框架之前首先在机器中安装好nodejs，使用node -v命令可以查看nodejs版本,npm -v命令可以查看npm版本。</p>
<h3 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1:安装Hexo"></a>1:安装Hexo</h3><span id="more"></span>    
<h4 id="下载hexo"><a href="#下载hexo" class="headerlink" title="下载hexo"></a>下载hexo</h4><blockquote>
<p>npm install hexo-cli -g<br>输入hexo命令检查是否安装成功,出现hexo comand not found 检查环境变量是否配置</p>
</blockquote>
<h4 id="初始化文件"><a href="#初始化文件" class="headerlink" title="初始化文件"></a>初始化文件</h4><blockquote>
<p>hexo init folderName</p>
</blockquote>
<h4 id="切换至folderName"><a href="#切换至folderName" class="headerlink" title="切换至folderName"></a>切换至folderName</h4><blockquote>
<p>cd folderName<br>在folderName下输入hexo命令出现：ERROR local hexo not found in folderName尝试升级nodejs版本，可以解决该问题</p>
</blockquote>
<h4 id="下载hexo所需的一些依赖"><a href="#下载hexo所需的一些依赖" class="headerlink" title="下载hexo所需的一些依赖"></a>下载hexo所需的一些依赖</h4><blockquote>
<p>npm install</p>
</blockquote>
<h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><blockquote>
<p>hexo generate&#x2F;hexo g</p>
</blockquote>
<h4 id="启动hexo服务"><a href="#启动hexo服务" class="headerlink" title="启动hexo服务"></a>启动hexo服务</h4><blockquote>
<p>hexo server&#x2F;hexo s</p>
</blockquote>
<p>打开浏览器输入localhost:4000出现Hexo默认界面安装成功</p>
<h3 id="2-自定义主题-next主题"><a href="#2-自定义主题-next主题" class="headerlink" title="2:自定义主题(next主题)"></a>2:自定义主题(next主题)</h3><p>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>站点根目录下称为<strong>站点配置文件</strong>,主题目录下称为<strong>主题配置文件</strong></p>
<h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><blockquote>
<p>cd your-hexo-side<br>git clone <a href="https://github.com/iissnan/hexo-theme-next">https://github.com/iissnan/hexo-theme-next</a> themes&#x2F;next 最新版本</p>
</blockquote>
<h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>克隆完成后,打开<strong>站点配置文件</strong></p>
<blockquote>
<p>vim _config.yml 没有权限读写文件可以使用su root变为管理员<br>找到theme,将值改为next theme： next</p>
</blockquote>
<h4 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h4><p>在验证前可以使用hexo clean清理缓存</p>
<blockquote>
<p>hexo generate&#x2F;hexo g 生成静态文件<br>hexo s –debug&#x2F;hexo server –debug 启动hexo服务并开启debug<br>npm install 下载所需依赖，因为next目录下的.gitignore忽略node-modules所以需要重新下载</p>
</blockquote>
<p>出现下列信息时</p>
<blockquote>
<p>INFO Hexo is running at <a href="http://0.0.0.0:4000/">http://0.0.0.0:4000/</a>. Press Ctrl+C to stop.</p>
</blockquote>
<p>可以打开浏览器输入:localhost:4000访问</p>
<h4 id="更多next主题个性化设置-http-theme-next-iissnan-com-getting-started-html"><a href="#更多next主题个性化设置-http-theme-next-iissnan-com-getting-started-html" class="headerlink" title="更多next主题个性化设置:http://theme-next.iissnan.com/getting-started.html"></a>更多next主题个性化设置:<a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></h4>]]></content>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven系列之管理不同环境的配置文件</title>
    <url>/2018/06/02/Maven1/</url>
    <content><![CDATA[<h1 id="Maven系列之管理不同环境的配置文件"><a href="#Maven系列之管理不同环境的配置文件" class="headerlink" title="Maven系列之管理不同环境的配置文件"></a><center>Maven系列之管理不同环境的配置文件</h1><blockquote>
<p>在一个项目的开发-测试-生产过程中，需要配置不同的环境配置文件，例如db属性配置，redis连接属性等的配置。如果每次从开发环境发布到测试服务器或者发布到生产服务器上都要去修改配置文件无疑会十分混乱，所以可以使用maven来管理不同环境的配置文件提高效率。</p>
</blockquote>
<h2 id="一，环境"><a href="#一，环境" class="headerlink" title="一，环境"></a>一，环境</h2><span id="more"></span>
<p>项目上线大概会经过开发，测试，生产等3种环境(还有可能会经过灰度环境)，这时应对不同的环境我们便需要配置对应数量的配置文件。</p>
<h2 id="二，使用Maven"><a href="#二，使用Maven" class="headerlink" title="二，使用Maven"></a>二，使用Maven</h2><p>首先使用idea建立一个maven项目Demo1,在resource下建立dev,pro,test三个目录分别代表开发，生产，测试三种环境，在目录中新建db.properties文件，db.properties文件中填写数据库的连接信息，不同的环境填写在不同的目录下。大致结构目录如下：</p>
<center> ![](/images/maven/环境配置/目录结构.png)
<center> 图一

<p>添加完成后再pom.xml文件中填写以下配置:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;profiles&gt;</span><br><span class="line">       &lt;!-- 本地开发环境 --&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;dev&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profiles.active&gt;dev&lt;/profiles.active&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">           &lt;activation&gt;</span><br><span class="line">               &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;</span><br><span class="line">           &lt;/activation&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;!-- 测试环境 --&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;test&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profiles.active&gt;test&lt;/profiles.active&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">       &lt;!-- 生产环境 --&gt;</span><br><span class="line">       &lt;profile&gt;</span><br><span class="line">           &lt;id&gt;pro&lt;/id&gt;</span><br><span class="line">           &lt;properties&gt;</span><br><span class="line">               &lt;profiles.active&gt;pro&lt;/profiles.active&gt;</span><br><span class="line">           &lt;/properties&gt;</span><br><span class="line">       &lt;/profile&gt;</span><br><span class="line">   &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 打包配置--&gt;</span><br><span class="line">   &lt;build&gt;</span><br><span class="line">      &lt;resources&gt;</span><br><span class="line">          &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">              &lt;filtering&gt;true&lt;/filtering&gt; &lt;!-- 是否使用过滤器 --&gt;</span><br><span class="line">              &lt;includes&gt;</span><br><span class="line">                  &lt;include&gt;**/*&lt;/include&gt;</span><br><span class="line">              &lt;/includes&gt;</span><br><span class="line">              &lt;!-- 资源根目录排除各环境的配置，防止再生成目录中多余其它目录 --&gt;</span><br><span class="line">              &lt;excludes&gt;</span><br><span class="line">                  &lt;exclude&gt;test/&lt;/exclude&gt;</span><br><span class="line">                  &lt;exclude&gt;pro/&lt;/exclude&gt;</span><br><span class="line">                  &lt;exclude&gt;dev/&lt;/exclude&gt;</span><br><span class="line">              &lt;/excludes&gt;</span><br><span class="line">          &lt;/resource&gt;</span><br><span class="line">          &lt;resource&gt;</span><br><span class="line">              &lt;directory&gt;src/main/resources/$&#123;profiles.active&#125;&lt;/directory&gt;</span><br><span class="line">          &lt;/resource&gt;</span><br><span class="line">      &lt;/resources&gt;</span><br><span class="line"></span><br><span class="line">      &lt;finalName&gt;Demo1&lt;/finalName&gt;</span><br><span class="line">      &lt;plugins&gt;</span><br><span class="line"></span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;source&gt;1.7&lt;/source&gt;</span><br><span class="line">                  &lt;target&gt;1.7&lt;/target&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- Web Server Tomcat --&gt;</span><br><span class="line">          &lt;plugin&gt;</span><br><span class="line">              &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">              &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">              &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;path&gt;/&lt;/path&gt;</span><br><span class="line">                  &lt;uriEncoding&gt;UTF-8&lt;/uriEncoding&gt; &lt;!--处理 GET 的中文--&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">          &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">      &lt;/plugins&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/build&gt;</span><br></pre></td></tr></table></figure>
<p>在pom文件中添加完成后打开idea右侧的maven projects视图，大致展现结果：</p>
<center> ![](/images/maven/环境配置/maven视图.png)
<center> 图二

<p>pom文件的配置自动加载的是dev下的配置，如果想要加载其他环境的配置只需要在图二中勾选其他环境然后点击左上角刷新按钮即可加载其他环境配置。当发布项目时可以使用-Pxxx选项来选择加载哪个目录下配置文件，例如-Ptest即加载test目录下的配置文件。</p>
<h4 id="初稿，后续会继续修改。。。。"><a href="#初稿，后续会继续修改。。。。" class="headerlink" title="初稿，后续会继续修改。。。。"></a><center>初稿，后续会继续修改。。。。</h4>]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven系列之替换jar包中的类</title>
    <url>/2019/02/27/Maven2/</url>
    <content><![CDATA[<h1 id="Maven系列之替换jar包中的类"><a href="#Maven系列之替换jar包中的类" class="headerlink" title="Maven系列之替换jar包中的类"></a><center>Maven系列之替换jar包中的类</h1><blockquote>
<p>在maven项目中引入第三方jar包时，某些特殊情况下第三方jar包无法满足我们的需求，这时可以对第三方jar包某些类进行修改，重新依赖新的jar包。</p>
</blockquote>
<h2 id="一，准备"><a href="#一，准备" class="headerlink" title="一，准备"></a>一，准备</h2><span id="more"></span>
<p>本文替换的jar包是littleproxy,在替换前新建一个maven项目demo,引入依赖littleproxy,pom文件如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.littleshoot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;littleproxy&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>
<p>引入依赖成功后下载littleproxy的source文件，可以在idea的maven视图中下载。</p>
<center> ![](/images/maven/替换jar包的类/source.png)

<h2 id="二，替换"><a href="#二，替换" class="headerlink" title="二，替换"></a>二，替换</h2><p>根据不同的情况替换你想要替换的类，例如将ProxyUtils类的stripHost方法输出一下uri,在替换前该方法是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String stripHost(final String uri) &#123;</span><br><span class="line">        if (!HTTP_PREFIX.matcher(uri).matches()) &#123;</span><br><span class="line">            // It&#x27;s likely a URI path, not the full URI (i.e. the host is</span><br><span class="line">            // already stripped).</span><br><span class="line">            return uri;</span><br><span class="line">        &#125;</span><br><span class="line">        final String noHttpUri = StringUtils.substringAfter(uri, &quot;://&quot;);</span><br><span class="line">        final int slashIndex = noHttpUri.indexOf(&quot;/&quot;);</span><br><span class="line">        if (slashIndex == -1) &#123;</span><br><span class="line">            return &quot;/&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        final String noHostUri = noHttpUri.substring(slashIndex);</span><br><span class="line">        return noHostUri;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>首先找到ProxyUtils的完整包名,在idea中搜索到ProxyUtils的完整包名是org.littleshoot.proxy.impl,为了防止包名不一致,所以在demo项目中新建一个包名org.littleshoot.proxy.impl,将littleproxy的source中的ProxyUtils拷贝至demo项目中,最终效果如下:</p>
<center> ![](/images/maven/替换jar包的类/ProxyUtils.png)

<p>这时在stripHost方法中添加输出uri:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static String stripHost(final String uri) &#123;</span><br><span class="line">       System.out.println(uri);</span><br><span class="line">       if (!HTTP_PREFIX.matcher(uri).matches()) &#123;</span><br><span class="line">           // It&#x27;s likely a URI path, not the full URI (i.e. the host is</span><br><span class="line">           // already stripped).</span><br><span class="line">           return uri;</span><br><span class="line">       &#125;</span><br><span class="line">       final String noHttpUri = StringUtils.substringAfter(uri, &quot;://&quot;);</span><br><span class="line">       final int slashIndex = noHttpUri.indexOf(&quot;/&quot;);</span><br><span class="line">       if (slashIndex == -1) &#123;</span><br><span class="line">           return &quot;/&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">       final String noHostUri = noHttpUri.substring(slashIndex);</span><br><span class="line">       return noHostUri;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在demo项目下新建libs目录,找到littleshoot在本地maven仓库的jar包littleproxy-1.1.2.jar,复制后粘贴到libs,如下所示:</p>
<center> ![](/images/maven/替换jar包的类/libs.png)

<p>编译ProxyUtils,用winrar打开libs下的littleproxy-1.1.2.jar,删除ProxyUtils.class，将编译后的ProxyUtils.class文件复制粘贴进去替换。修改pom文件如下所示:</p>
<blockquote>
<p>更新jar包可以使用jar -uvf littleproxy-1.1.2.jar ProxyUtils.class所在目录&#x2F;ProxyUtils.class文件</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.demo&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</span><br><span class="line"></span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.littleshoot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;littleproxy&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">           &lt;systemPath&gt;$&#123;project.basedir&#125;/libs/littleproxy-1.1.2.jar&lt;/systemPath&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">   &lt;/dependencies&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure>

<p>这时所引入的依赖就是修改后的littleshoot。</p>
]]></content>
      <tags>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>分析报告|多线程并发扣减问题</title>
    <url>/2020/09/13/analysis-report-concurrent-reduce/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上周有天晚上笔者接到一个某知名互联网大厂的面试官打来的电话问最近看不看机会，想让我做一个笔试，由于自己也一直有在复习，所以就打算再试试面试机会。笔试题是一道多线程相关的编程题，要求在白板上使用面向对象的方式解决；在白板上写编程题总感觉没法发挥正常水平，题目类似的解决思路之前也在工作中遇见过或是看过类似的博客文章，最后做完题才发现自己理解错题意，没有多加思考。为了吸取经验教训，乘着这次机会总结一次相关问题。<strong>本文为问题总结,可能有误望谅解</strong>。</p>
<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><span id="more"></span>

<p>编程题大致题意是：<strong>有一个数字9，然后线程A每次减2，线程B每次减3，这个数字不能减到小于0，如果数字不够线程减时则线程停止</strong>。<br>这道题需要注意的问题是不能将数字减到小于0，由此可以得到第一种解法，两个线程同步执行，线程A减完之后线程B再执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solutoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">2</span>,solutoin)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">3</span>,solutoin)).start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Solution solutoin;</span><br><span class="line"></span><br><span class="line">        Task(<span class="type">int</span> num, Solution solutoin)&#123;</span><br><span class="line">            <span class="built_in">this</span>.num = num;</span><br><span class="line">            <span class="built_in">this</span>.solutoin = solutoin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (solutoin)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之前&quot;</span> + solutoin.count);</span><br><span class="line">                    <span class="keyword">if</span>(solutoin.count &lt; num)&#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    solutoin.count -= num;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之后&quot;</span> + solutoin.count);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用锁同步线程缺点也显而易见，多线程并发执行变成了多线程排队串行，性能差。第二种解法是使用原子类来解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AtomicLong</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Solution</span> <span class="variable">solutoin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Solution</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">2</span>,solutoin)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Task</span>(<span class="number">3</span>,solutoin)).start();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Solution solutoin;</span><br><span class="line"></span><br><span class="line">        Task(<span class="type">int</span> num, Solution solutoin)&#123;</span><br><span class="line">            <span class="built_in">this</span>.num = num;</span><br><span class="line">            <span class="built_in">this</span>.solutoin = solutoin;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之前&quot;</span> + solutoin.count);</span><br><span class="line">                <span class="keyword">if</span>(solutoin.count.get() &lt; num)&#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;停止&quot;</span> + solutoin.count);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                solutoin.count.addAndGet(-num);</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之后&quot;</span> + solutoin.count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用原子类AtomicLong来解决，然后这种方式还是存在问题，当两个线程都执行到if(solutoin.count.get() &lt; num)这行代码时，如果此时数字为3，两个线程分别执行 solutoin.count.addAndGet(-num)，此时数字减为-2，出现”库存超卖问题”。为了避免这个问题，再对代码做出修改，减之后判断结果是否小于0，如果小于0则回滚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之前&quot;</span> + solutoin.count);</span><br><span class="line">        <span class="comment">//修改,先减再判断，不足则回滚</span></span><br><span class="line">        <span class="keyword">if</span>(solutoin.count.addAndGet(-num) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            solutoin.count.addAndGet(num);</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;停止&quot;</span> + solutoin.count);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之后&quot;</span> + solutoin.count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用这种方式可以避免”库存超卖问题”,但是又会带来新的问题，如果此时数字减为2，两个线程都执行到if(solutoin.count.addAndGet(-num) &lt; 0)，线程B将2减为-1，线程A将-1减为-3，线程B回滚数字为0并终止，线程A回滚数字为2并终止。此时数字为2，还是可以再让线程A执行一次，造成误差。</p>
<p>为了解决”库存超卖问题”和避免误差，使用版本号的思路来解决</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//当前版本</span></span><br><span class="line">    <span class="type">long</span> currentCount;</span><br><span class="line">    <span class="keyword">while</span> ((currentCount = solutoin.count.get())&gt;=num)&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之前&quot;</span> + solutoin.count);</span><br><span class="line">        <span class="keyword">if</span>(solutoin.count.compareAndSet(currentCount,currentCount - num))&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;减之后&quot;</span> + solutoin.count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>在每次更新数字时，比较当前的版本是否是上一个版本，如果版本相同则更新不同则继续判断执行。这种方式可以避免”库存超卖问题”和误差，但是缺点就是线程一直在不断执行循环开销比较大。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>按照目前的求职环境，如果想要去大厂，在白板写笔试题在所难免。笔者之所有有这次面试机会是因为在2019年10月份投递过其中一个部门，当时经历过一轮电话简历面，几天后再加一轮在线笔试。当时的笔试是一道多线程相关的题目和一道算法题，要求在一个小时内完成；由于没有刷过算法题，最后只完成了多线程相关的题。这次面试过后也有几次其他部门的面试官捞过我的简历让我去面试，并没有每次都参加了面试，只在今年3月份参加过一次，一面就被问到很多分布式相关技术，这方面的知识还是比较欠缺，有些应用过但没有熟悉其中的原理，结果也可想而知。上周的面试之所以答应参加是因为正好也想换一份工作，但立马就参加笔试确实不是明智之举。言归正传，多线程技术是每个程序员进阶都需要掌握的，学习多线程需要结合理论知识和加以实践才能掌握的很好，因为多线程的执行结果往往并不如你所想，需要考虑多很多细节问题。</p>
]]></content>
      <tags>
        <tag>分析报告</tag>
      </tags>
  </entry>
  <entry>
    <title>常用指令总结</title>
    <url>/2018/12/17/commands/</url>
    <content><![CDATA[<h1 id="一-数据库"><a href="#一-数据库" class="headerlink" title="一:数据库"></a>一:数据库</h1><h3 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h3><ul>
<li><h4 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h4></li>
</ul>
<p>mysql -h host -u username -p password</p>
<ul>
<li><h4 id="设置字符集"><a href="#设置字符集" class="headerlink" title="设置字符集"></a>设置字符集</h4></li>
</ul>
<p>set names utf8</p>
<span id="more"></span>

<h3 id="show命令"><a href="#show命令" class="headerlink" title="show命令"></a>show命令</h3><ul>
<li><h4 id="显示系统变量的名称和值"><a href="#显示系统变量的名称和值" class="headerlink" title="显示系统变量的名称和值"></a>显示系统变量的名称和值</h4></li>
</ul>
<p>show variables</p>
<ul>
<li><h4 id="显示一些系统特定资源的信息"><a href="#显示一些系统特定资源的信息" class="headerlink" title="显示一些系统特定资源的信息"></a>显示一些系统特定资源的信息</h4></li>
</ul>
<p>show status</p>
<ul>
<li><h4 id="显示系统中正在运行的所有进程"><a href="#显示系统中正在运行的所有进程" class="headerlink" title="显示系统中正在运行的所有进程"></a>显示系统中正在运行的所有进程</h4></li>
</ul>
<p>show [full] processlist</p>
<ul>
<li><h4 id="显示当前会话语句-需要使用SET-profiling-x3D-1开启prifile"><a href="#显示当前会话语句-需要使用SET-profiling-x3D-1开启prifile" class="headerlink" title="显示当前会话语句(需要使用SET profiling &#x3D; 1开启prifile)"></a>显示当前会话语句(需要使用SET profiling &#x3D; 1开启prifile)</h4></li>
</ul>
<p>show profiles</p>
<ul>
<li><h4 id="显示语句工作情况和消耗时间情况"><a href="#显示语句工作情况和消耗时间情况" class="headerlink" title="显示语句工作情况和消耗时间情况"></a>显示语句工作情况和消耗时间情况</h4></li>
</ul>
<p>show profile [cpu,block io,all,…] for query queryId</p>
<hr>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul>
<li><h4 id="连接数据库-1"><a href="#连接数据库-1" class="headerlink" title="连接数据库"></a>连接数据库</h4></li>
</ul>
<p>redis-cli -h host -p port -a “password”</p>
<ul>
<li><h4 id="查询所有可用的key"><a href="#查询所有可用的key" class="headerlink" title="查询所有可用的key"></a>查询所有可用的key</h4></li>
</ul>
<p>key *</p>
<ul>
<li><h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4></li>
</ul>
<p>select db</p>
<ul>
<li><h4 id="内存分析-info命令"><a href="#内存分析-info命令" class="headerlink" title="内存分析(info命令)"></a>内存分析(info命令)</h4></li>
</ul>
<p>info memory</p>
<hr>
<ul>
<li><h4 id="向有序集合添加元素"><a href="#向有序集合添加元素" class="headerlink" title="向有序集合添加元素"></a>向有序集合添加元素</h4></li>
</ul>
<p>zadd sorted_set_name score id</p>
<ul>
<li><h4 id="查看有序集合某个元素的分数"><a href="#查看有序集合某个元素的分数" class="headerlink" title="查看有序集合某个元素的分数"></a>查看有序集合某个元素的分数</h4></li>
</ul>
<p>zscore sorted_set_name id</p>
<ul>
<li><h4 id="由高到低查看有序集合的id-0-1代表元素下标"><a href="#由高到低查看有序集合的id-0-1代表元素下标" class="headerlink" title="由高到低查看有序集合的id(0,-1代表元素下标)"></a>由高到低查看有序集合的id(0,-1代表元素下标)</h4></li>
</ul>
<p>zrevrange sorted_set_name 0 -1</p>
<ul>
<li><h4 id="由高到低查看有序集合的id并且带上分数-0-1代表元素下标"><a href="#由高到低查看有序集合的id并且带上分数-0-1代表元素下标" class="headerlink" title="由高到低查看有序集合的id并且带上分数(0,-1代表元素下标)"></a>由高到低查看有序集合的id并且带上分数(0,-1代表元素下标)</h4></li>
</ul>
<p>zrevrange sorted_set_name 0 -1 withscores</p>
<ul>
<li><h4 id="由低到高查看有序集合的id-0-1代表元素下标"><a href="#由低到高查看有序集合的id-0-1代表元素下标" class="headerlink" title="由低到高查看有序集合的id(0,-1代表元素下标)"></a>由低到高查看有序集合的id(0,-1代表元素下标)</h4></li>
</ul>
<p>zrange sorted_set_name 0 -1</p>
<ul>
<li><h4 id="由低到高查看有序集合的id并且带上分数-0-1代表元素下标"><a href="#由低到高查看有序集合的id并且带上分数-0-1代表元素下标" class="headerlink" title="由低到高查看有序集合的id并且带上分数(0,-1代表元素下标)"></a>由低到高查看有序集合的id并且带上分数(0,-1代表元素下标)</h4></li>
</ul>
<p>zrange sorted_set_name 0 -1 withscores</p>
<ul>
<li><h4 id="获取某个元素的排行"><a href="#获取某个元素的排行" class="headerlink" title="获取某个元素的排行"></a>获取某个元素的排行</h4></li>
</ul>
<p>zrevrank sorted_set_name id</p>
<ul>
<li><h4 id="增加某个元素的分数-元素不存在默认初始值为0"><a href="#增加某个元素的分数-元素不存在默认初始值为0" class="headerlink" title="增加某个元素的分数,元素不存在默认初始值为0"></a>增加某个元素的分数,元素不存在默认初始值为0</h4></li>
</ul>
<p>zincrby sorted_set_name score id</p>
<ul>
<li><h4 id="删除某个元素"><a href="#删除某个元素" class="headerlink" title="删除某个元素"></a>删除某个元素</h4></li>
</ul>
<p>zrem sorted_set_name id</p>
<ul>
<li><h4 id="删除有序集合"><a href="#删除有序集合" class="headerlink" title="删除有序集合"></a>删除有序集合</h4></li>
</ul>
<p>del sorted_set_name</p>
<hr>
<h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul>
<li><h4 id="使用默认端口连接MongoDB"><a href="#使用默认端口连接MongoDB" class="headerlink" title="使用默认端口连接MongoDB"></a>使用默认端口连接MongoDB</h4></li>
</ul>
<p>mongo host</p>
<ul>
<li><h4 id="连接MongoDB并指定端口"><a href="#连接MongoDB并指定端口" class="headerlink" title="连接MongoDB并指定端口"></a>连接MongoDB并指定端口</h4></li>
</ul>
<p>mongo host port</p>
<ul>
<li><h4 id="连接到指定的MongoDB数据库"><a href="#连接到指定的MongoDB数据库" class="headerlink" title="连接到指定的MongoDB数据库"></a>连接到指定的MongoDB数据库</h4></li>
</ul>
<p>mongo host port&#x2F;dbName</p>
<ul>
<li><h4 id="指定用户名和密码连接到指定的MongoDB数据库"><a href="#指定用户名和密码连接到指定的MongoDB数据库" class="headerlink" title="指定用户名和密码连接到指定的MongoDB数据库"></a>指定用户名和密码连接到指定的MongoDB数据库</h4></li>
</ul>
<p>mongo host port&#x2F;dbName -u username -p password</p>
<hr>
<ul>
<li><h4 id="导出数据-–type后接json或cvs文件，-f后接字段双引号内用逗号隔开"><a href="#导出数据-–type后接json或cvs文件，-f后接字段双引号内用逗号隔开" class="headerlink" title="导出数据(–type后接json或cvs文件，-f后接字段双引号内用逗号隔开)"></a>导出数据(–type后接json或cvs文件，-f后接字段双引号内用逗号隔开)</h4></li>
</ul>
<p>mongoexport -h host -u username -p password -d dbname -c collectionname -o file –type json&#x2F;csv -f field</p>
<ul>
<li><h4 id="导入数据-–headerline-如果导入的格式是csv，则可以使用第一行的标题作为导入的字段，其他同导出数据"><a href="#导入数据-–headerline-如果导入的格式是csv，则可以使用第一行的标题作为导入的字段，其他同导出数据" class="headerlink" title="导入数据(–headerline 如果导入的格式是csv，则可以使用第一行的标题作为导入的字段，其他同导出数据)"></a>导入数据(–headerline 如果导入的格式是csv，则可以使用第一行的标题作为导入的字段，其他同导出数据)</h4></li>
</ul>
<p>mongoimport -h host -u username -p password -d dbname -c collectionname –file filename –headerline –type json&#x2F;csv -f field</p>
<h1 id="二-Git"><a href="#二-Git" class="headerlink" title="二:Git"></a>二:Git</h1><h3 id="stash功能"><a href="#stash功能" class="headerlink" title="stash功能"></a>stash功能</h3><ul>
<li><h4 id="暂存-保存在git整个栈中"><a href="#暂存-保存在git整个栈中" class="headerlink" title="暂存(保存在git整个栈中)"></a>暂存(保存在git整个栈中)</h4></li>
</ul>
<p>git stash</p>
<ul>
<li><h4 id="设置保存名"><a href="#设置保存名" class="headerlink" title="设置保存名"></a>设置保存名</h4></li>
</ul>
<p>git stash save “stashName”</p>
<ul>
<li><h4 id="查看暂存列表"><a href="#查看暂存列表" class="headerlink" title="查看暂存列表"></a>查看暂存列表</h4></li>
</ul>
<p>git stash list</p>
<ul>
<li><h4 id="恢复最近一次暂存，从暂存列表中删除"><a href="#恢复最近一次暂存，从暂存列表中删除" class="headerlink" title="恢复最近一次暂存，从暂存列表中删除"></a>恢复最近一次暂存，从暂存列表中删除</h4></li>
</ul>
<p>git stash pop</p>
<ul>
<li><h4 id="应用某一次暂存，暂存列表中不删除"><a href="#应用某一次暂存，暂存列表中不删除" class="headerlink" title="应用某一次暂存，暂存列表中不删除"></a>应用某一次暂存，暂存列表中不删除</h4></li>
</ul>
<p>git stash aplly “stashName”</p>
<hr>
<h3 id="回退功能"><a href="#回退功能" class="headerlink" title="回退功能"></a>回退功能</h3><ul>
<li><h4 id="回退到指定版本"><a href="#回退到指定版本" class="headerlink" title="回退到指定版本"></a>回退到指定版本</h4></li>
</ul>
<p>git reset –hard “commit id”</p>
<hr>
<h3 id="分支对比"><a href="#分支对比" class="headerlink" title="分支对比"></a>分支对比</h3><ul>
<li><h4 id="对比两个分支不同"><a href="#对比两个分支不同" class="headerlink" title="对比两个分支不同"></a>对比两个分支不同</h4></li>
</ul>
<p>git log dev…master</p>
<ul>
<li><h4 id="对比两个分支提交的不同"><a href="#对比两个分支提交的不同" class="headerlink" title="对比两个分支提交的不同"></a>对比两个分支提交的不同</h4></li>
</ul>
<p>git log –left-right dev…master</p>
<ul>
<li><h4 id="一个分支比另一个分支多"><a href="#一个分支比另一个分支多" class="headerlink" title="一个分支比另一个分支多"></a>一个分支比另一个分支多</h4></li>
</ul>
<p>git log dev..master</p>
<ul>
<li><h4 id="一个分支有另一个分支没有"><a href="#一个分支有另一个分支没有" class="headerlink" title="一个分支有另一个分支没有"></a>一个分支有另一个分支没有</h4></li>
</ul>
<p>git log dev ^master</p>
<hr>
<h3 id="rebase功能-合并本地仓库的多个commit-不要修改已经提交到远程仓库的commit"><a href="#rebase功能-合并本地仓库的多个commit-不要修改已经提交到远程仓库的commit" class="headerlink" title="rebase功能(合并本地仓库的多个commit,不要修改已经提交到远程仓库的commit)"></a>rebase功能(合并本地仓库的多个commit,不要修改已经提交到远程仓库的commit)</h3><ul>
<li><h4 id="合并本地3个commit"><a href="#合并本地3个commit" class="headerlink" title="合并本地3个commit"></a>合并本地3个commit</h4></li>
</ul>
<p>git rebase -i HEAD~3 </p>
<h1 id="三-NodeJs"><a href="#三-NodeJs" class="headerlink" title="三:NodeJs"></a>三:NodeJs</h1><h3 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h3><ul>
<li><h4 id="新建一个页面"><a href="#新建一个页面" class="headerlink" title="新建一个页面"></a>新建一个页面</h4></li>
</ul>
<p>hexo new “pageName”</p>
<ul>
<li><h4 id="新建一个草稿"><a href="#新建一个草稿" class="headerlink" title="新建一个草稿"></a>新建一个草稿</h4></li>
</ul>
<p>hexo new draft “draftName”</p>
<ul>
<li><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4></li>
</ul>
<p>hexo generate&#x2F;hexo g</p>
<ul>
<li><h4 id="启动hexo服务"><a href="#启动hexo服务" class="headerlink" title="启动hexo服务"></a>启动hexo服务</h4></li>
</ul>
<p>hexo server&#x2F;hexo s</p>
<ul>
<li><h5 id="部署发布"><a href="#部署发布" class="headerlink" title="部署发布"></a>部署发布</h5></li>
</ul>
<p>hexo deploy&#x2F;hexo d</p>
<hr>
<h1 id="四-Java"><a href="#四-Java" class="headerlink" title="四:Java"></a>四:Java</h1><ul>
<li><h4 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h4></li>
</ul>
<p>jstack pid</p>
<ul>
<li><h4 id="查看当前堆中的各个对象的数量和大小-增加live只打印活跃的对象"><a href="#查看当前堆中的各个对象的数量和大小-增加live只打印活跃的对象" class="headerlink" title="查看当前堆中的各个对象的数量和大小(增加live只打印活跃的对象)"></a>查看当前堆中的各个对象的数量和大小(增加live只打印活跃的对象)</h4></li>
</ul>
<p>jmap -histo[:live] <pid></p>
<ul>
<li><h4 id="查看java堆的配置情况和使用的GC算法"><a href="#查看java堆的配置情况和使用的GC算法" class="headerlink" title="查看java堆的配置情况和使用的GC算法"></a>查看java堆的配置情况和使用的GC算法</h4></li>
</ul>
<p>jmap -heap <pid></p>
<ul>
<li><h4 id="查看等待执行finalize方法的对象"><a href="#查看等待执行finalize方法的对象" class="headerlink" title="查看等待执行finalize方法的对象"></a>查看等待执行finalize方法的对象</h4></li>
</ul>
<p>jmap -finalizerinfo <pid></p>
<ul>
<li><h4 id="dump当前堆的对象-增加live只打印活跃的对象"><a href="#dump当前堆的对象-增加live只打印活跃的对象" class="headerlink" title="dump当前堆的对象(增加live只打印活跃的对象)"></a>dump当前堆的对象(增加live只打印活跃的对象)</h4></li>
</ul>
<p>jmap -dump:[live,]format&#x3D;b,file&#x3D;<filename> <pid></p>
<hr>
<h3 id="jar命令"><a href="#jar命令" class="headerlink" title="jar命令"></a>jar命令</h3><ul>
<li><h4 id="更新jar包中的类"><a href="#更新jar包中的类" class="headerlink" title="更新jar包中的类"></a>更新jar包中的类</h4></li>
</ul>
<p>jar -uvf jarName dirName&#x2F;className.class</p>
<hr>
<h1 id="五-Linux"><a href="#五-Linux" class="headerlink" title="五:Linux"></a>五:Linux</h1><h3 id="文件安装"><a href="#文件安装" class="headerlink" title="文件安装"></a>文件安装</h3><ul>
<li><h4 id="安装deb文件"><a href="#安装deb文件" class="headerlink" title="安装deb文件"></a>安装deb文件</h4></li>
</ul>
<p>dpkg -i &lt;package.deb&gt;</p>
<ul>
<li><h4 id="移除一个已安装的包裹"><a href="#移除一个已安装的包裹" class="headerlink" title="移除一个已安装的包裹"></a>移除一个已安装的包裹</h4></li>
</ul>
<p>dpkg -r <package></p>
<ul>
<li><h4 id="安装rz"><a href="#安装rz" class="headerlink" title="安装rz"></a>安装rz</h4></li>
</ul>
<p>yum install lrzsz  -y</p>
<hr>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><ul>
<li><h4 id="查看进程cpu，内存使用率"><a href="#查看进程cpu，内存使用率" class="headerlink" title="查看进程cpu，内存使用率"></a>查看进程cpu，内存使用率</h4></li>
</ul>
<p>top</p>
<ul>
<li><h4 id="查看进程下各个线程的cpu使用情况"><a href="#查看进程下各个线程的cpu使用情况" class="headerlink" title="查看进程下各个线程的cpu使用情况"></a>查看进程下各个线程的cpu使用情况</h4></li>
</ul>
<p>top -Hp pid</p>
<ul>
<li><h4 id="查看端口连接人数"><a href="#查看端口连接人数" class="headerlink" title="查看端口连接人数:"></a>查看端口连接人数:</h4></li>
</ul>
<p>netstat -na | grep ESTAB | grep 8080 | wc -l</p>
<ul>
<li><h4 id="查看网络信息-每秒统计一次"><a href="#查看网络信息-每秒统计一次" class="headerlink" title="查看网络信息  每秒统计一次:"></a>查看网络信息  每秒统计一次:</h4></li>
</ul>
<p>sar -n TCP,ETCP 1</p>
<hr>
<h3 id="远程登录"><a href="#远程登录" class="headerlink" title="远程登录"></a>远程登录</h3><ul>
<li><h4 id="管理远程主机，可做mysql，redis服务器的连接测试"><a href="#管理远程主机，可做mysql，redis服务器的连接测试" class="headerlink" title="管理远程主机，可做mysql，redis服务器的连接测试"></a>管理远程主机，可做mysql，redis服务器的连接测试</h4></li>
</ul>
<p>telent ip port</p>
<ul>
<li><h4 id="远程登录，免密码登录"><a href="#远程登录，免密码登录" class="headerlink" title="远程登录，免密码登录"></a>远程登录，免密码登录</h4></li>
</ul>
<p>ssh user@ip</p>
<ul>
<li><h4 id="向远程主机发布命令"><a href="#向远程主机发布命令" class="headerlink" title="向远程主机发布命令"></a>向远程主机发布命令</h4></li>
</ul>
<p>ssh user@ip “command”</p>
<ul>
<li><h4 id="向远程服务器发布文件"><a href="#向远程服务器发布文件" class="headerlink" title="向远程服务器发布文件"></a>向远程服务器发布文件</h4></li>
</ul>
<p>scp localfile user@ip:folder</p>
<ul>
<li><h4 id="向远程服务器发布目录"><a href="#向远程服务器发布目录" class="headerlink" title="向远程服务器发布目录"></a>向远程服务器发布目录</h4></li>
</ul>
<p>scp -r localfolder user@ip:folder</p>
<hr>
<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ul>
<li><h4 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h4></li>
</ul>
<p>crontab -e</p>
<ul>
<li><h4 id="展示所有定时任务"><a href="#展示所有定时任务" class="headerlink" title="展示所有定时任务"></a>展示所有定时任务</h4></li>
</ul>
<p>crontab -l</p>
<ul>
<li><h4 id="删除定时任务"><a href="#删除定时任务" class="headerlink" title="删除定时任务"></a>删除定时任务</h4></li>
</ul>
<p>crontab -r</p>
<hr>
<h1 id="六-Storm"><a href="#六-Storm" class="headerlink" title="六:Storm"></a>六:Storm</h1><ul>
<li><h4 id="启动ui界面-在nimbus节点上使用"><a href="#启动ui界面-在nimbus节点上使用" class="headerlink" title="启动ui界面,在nimbus节点上使用"></a>启动ui界面,在nimbus节点上使用</h4></li>
</ul>
<p>storm ui</p>
<ul>
<li><h4 id="启动nimbus-在nimbus节点上使用"><a href="#启动nimbus-在nimbus节点上使用" class="headerlink" title="启动nimbus,在nimbus节点上使用"></a>启动nimbus,在nimbus节点上使用</h4></li>
</ul>
<p>storm nimbus</p>
<ul>
<li><h4 id="启动supervisor-在supervisor节点使用"><a href="#启动supervisor-在supervisor节点使用" class="headerlink" title="启动supervisor,在supervisor节点使用"></a>启动supervisor,在supervisor节点使用</h4></li>
</ul>
<p>storm supervisor</p>
<ul>
<li><h4 id="向集群提交拓扑"><a href="#向集群提交拓扑" class="headerlink" title="向集群提交拓扑"></a>向集群提交拓扑</h4></li>
</ul>
<p>storm jar [ topology_jar ]  [ topology_class ] [ topology_name]</p>
<ul>
<li><h4 id="关闭已经部署的-Topology"><a href="#关闭已经部署的-Topology" class="headerlink" title="关闭已经部署的 Topology"></a>关闭已经部署的 Topology</h4></li>
</ul>
<p>storm kill [ topology_name [- w wait_time]</p>
<ul>
<li><h4 id="停止特定的Topology的Spout发射Tuple"><a href="#停止特定的Topology的Spout发射Tuple" class="headerlink" title="停止特定的Topology的Spout发射Tuple"></a>停止特定的Topology的Spout发射Tuple</h4></li>
</ul>
<p>storm deactivate [topology_name]</p>
<ul>
<li><h4 id="重新恢复特定Topology的Spout发射Tuple"><a href="#重新恢复特定Topology的Spout发射Tuple" class="headerlink" title="重新恢复特定Topology的Spout发射Tuple"></a>重新恢复特定Topology的Spout发射Tuple</h4></li>
</ul>
<p>storm activate [topology_name]</p>
<ul>
<li><h4 id="指示Storm在集群的Worker之间重新平均分派任务不需要关闭或者重新提交现有的Topology-一个新的Supervisor节点添加到一个集群中-就需要执行这个命令"><a href="#指示Storm在集群的Worker之间重新平均分派任务不需要关闭或者重新提交现有的Topology-一个新的Supervisor节点添加到一个集群中-就需要执行这个命令" class="headerlink" title="指示Storm在集群的Worker之间重新平均分派任务不需要关闭或者重新提交现有的Topology,一个新的Supervisor节点添加到一个集群中,就需要执行这个命令"></a>指示Storm在集群的Worker之间重新平均分派任务不需要关闭或者重新提交现有的Topology,一个新的Supervisor节点添加到一个集群中,就需要执行这个命令</h4></li>
</ul>
<p>storm rebalance [topology_name] [-w wait_time] [-n worker_count] [-e component_name&#x3D;executer_count]</p>
<hr>
<h1 id="七-adb命令-Android调试工具"><a href="#七-adb命令-Android调试工具" class="headerlink" title="七:adb命令(Android调试工具)"></a>七:adb命令(Android调试工具)</h1><ul>
<li><h4 id="查看当前连接的设备"><a href="#查看当前连接的设备" class="headerlink" title="查看当前连接的设备"></a>查看当前连接的设备</h4></li>
</ul>
<p>adb devices</p>
<ul>
<li><h4 id="连接设备"><a href="#连接设备" class="headerlink" title="连接设备"></a>连接设备</h4></li>
</ul>
<p>adb connect ip:port</p>
<hr>
<h1 id="八-Python"><a href="#八-Python" class="headerlink" title="八:Python"></a>八:Python</h1><h3 id="包管理工具-pip"><a href="#包管理工具-pip" class="headerlink" title="包管理工具(pip)"></a>包管理工具(pip)</h3><ul>
<li><h4 id="下载最新版本的包"><a href="#下载最新版本的包" class="headerlink" title="下载最新版本的包"></a>下载最新版本的包</h4></li>
</ul>
<p>pip install packageName</p>
<ul>
<li><h4 id="下载指定版本的包"><a href="#下载指定版本的包" class="headerlink" title="下载指定版本的包"></a>下载指定版本的包</h4></li>
</ul>
<p>pip install packageName&#x3D;version</p>
<ul>
<li><h4 id="下载最小版本"><a href="#下载最小版本" class="headerlink" title="下载最小版本"></a>下载最小版本</h4></li>
</ul>
<p>pip install ‘packageName&gt;&#x3D;version’</p>
<ul>
<li><h4 id="升级包"><a href="#升级包" class="headerlink" title="升级包"></a>升级包</h4></li>
</ul>
<p>pip install –upgrade packageName</p>
<ul>
<li><h4 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h4></li>
</ul>
<p>pip uninstall packageName</p>
<ul>
<li><h4 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h4></li>
</ul>
<p>pip search packageName</p>
<ul>
<li><h4 id="列出已安装的包"><a href="#列出已安装的包" class="headerlink" title="列出已安装的包"></a>列出已安装的包</h4></li>
</ul>
<p>pip list</p>
<ul>
<li><h4 id="查看可升级的包"><a href="#查看可升级的包" class="headerlink" title="查看可升级的包"></a>查看可升级的包</h4></li>
</ul>
<p>pip list -o</p>
<ul>
<li><h4 id="显示安装包信息"><a href="#显示安装包信息" class="headerlink" title="显示安装包信息"></a>显示安装包信息</h4></li>
</ul>
<p>pip show</p>
<ul>
<li><h4 id="查看指定包的详细信息"><a href="#查看指定包的详细信息" class="headerlink" title="查看指定包的详细信息"></a>查看指定包的详细信息</h4></li>
</ul>
<p>pip show -f packageName</p>
<h3 id="scrapy"><a href="#scrapy" class="headerlink" title="scrapy"></a>scrapy</h3><ul>
<li><h4 id="查看命令的详细信息"><a href="#查看命令的详细信息" class="headerlink" title="查看命令的详细信息"></a>查看命令的详细信息</h4></li>
</ul>
<p>scrapy command -h</p>
<ul>
<li><h4 id="创建一个scrapy项目"><a href="#创建一个scrapy项目" class="headerlink" title="创建一个scrapy项目"></a>创建一个scrapy项目</h4></li>
</ul>
<p>scrapy startproject project_name</p>
<ul>
<li><h4 id="创建一个spider"><a href="#创建一个spider" class="headerlink" title="创建一个spider"></a>创建一个spider</h4></li>
</ul>
<p>scrapy genspider spider_name mydomain.com</p>
<ul>
<li><h4 id="运行一个spider"><a href="#运行一个spider" class="headerlink" title="运行一个spider"></a>运行一个spider</h4></li>
</ul>
<p>scrapy crawl spider_name</p>
<hr>
<h1 id="九-Arthas"><a href="#九-Arthas" class="headerlink" title="九:Arthas"></a>九:Arthas</h1><ul>
<li><h4 id="方法内部调用路径-并输出方法路径上的每个节点上耗时"><a href="#方法内部调用路径-并输出方法路径上的每个节点上耗时" class="headerlink" title="方法内部调用路径,并输出方法路径上的每个节点上耗时"></a>方法内部调用路径,并输出方法路径上的每个节点上耗时</h4></li>
</ul>
<p>trace com.xxx.ClassName methodName</p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2018/05/26/design-pattern-singleton/</url>
    <content><![CDATA[<h1 id="创建单例"><a href="#创建单例" class="headerlink" title="创建单例"></a>创建单例</h1><blockquote>
<p>本文介绍使用Java创建单例的几种方式，后续会增加各种单例的优缺点分析。</p>
</blockquote>
<h2 id="一：饿汉式单例-静态成员变量初始化"><a href="#一：饿汉式单例-静态成员变量初始化" class="headerlink" title="一：饿汉式单例(静态成员变量初始化)"></a>一：饿汉式单例(静态成员变量初始化)</h2><span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static final Singleton singleton = new Singleton();</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二：饿汉式单例-静态代码块"><a href="#二：饿汉式单例-静态代码块" class="headerlink" title="二：饿汉式单例(静态代码块)"></a>二：饿汉式单例(静态代码块)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">  static&#123;</span><br><span class="line">    singleton = new Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三：懒汉式单例-多线程不可用"><a href="#三：懒汉式单例-多线程不可用" class="headerlink" title="三：懒汉式单例(多线程不可用)"></a>三：懒汉式单例(多线程不可用)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line"></span><br><span class="line">  private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    if (null == singleton) &#123;</span><br><span class="line">      singleton = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四：懒汉式单例-同步方法"><a href="#四：懒汉式单例-同步方法" class="headerlink" title="四：懒汉式单例(同步方法)"></a>四：懒汉式单例(同步方法)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line"></span><br><span class="line">  private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static synchronized Singleton getInstance()&#123;</span><br><span class="line">    if (null == singleton) &#123;</span><br><span class="line">      singleton = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="五：懒汉式单例-同步代码块"><a href="#五：懒汉式单例-同步代码块" class="headerlink" title="五：懒汉式单例(同步代码块)"></a>五：懒汉式单例(同步代码块)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line"></span><br><span class="line">  private static Singleton singleton;</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    if (null == singleton) &#123;</span><br><span class="line">      synchronized(Singleton.class)&#123;</span><br><span class="line">        singleton = new Singleton();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="六：懒汉式单例-双重检查判断"><a href="#六：懒汉式单例-双重检查判断" class="headerlink" title="六：懒汉式单例(双重检查判断)"></a>六：懒汉式单例(双重检查判断)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">  /*需要volatile关键字保证顺序性*/</span><br><span class="line">  private static volatile Singleton singleton;</span><br><span class="line"></span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance()&#123;</span><br><span class="line">    if (null == singleton) &#123;</span><br><span class="line">      synchronized(Singleton.class)&#123;</span><br><span class="line">        if(null == singleton)&#123;</span><br><span class="line">          singleton = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="七：枚举单例"><a href="#七：枚举单例" class="headerlink" title="七：枚举单例"></a>七：枚举单例</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public enum Singleton &#123;</span><br><span class="line">  SINGLETON;</span><br><span class="line">  private Singleton()&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="八：静态内部类单例-IODH"><a href="#八：静态内部类单例-IODH" class="headerlink" title="八：静态内部类单例(IODH)"></a>八：静态内部类单例(IODH)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">  private Singleton() &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  public static Singleton getInstance() &#123;</span><br><span class="line">    return InnerClass.singleton;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private static class InnerClass &#123;</span><br><span class="line">    private static final Singleton singleton = new Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="九-CAS原理实现单例"><a href="#九-CAS原理实现单例" class="headerlink" title="九:CAS原理实现单例"></a>九:CAS原理实现单例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.concurrent.CyclicBarrier;</span><br><span class="line">import java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author zhudg39@gmail.com</span><br><span class="line"> * @description CAS原理实现的单例:非阻塞,保证获取到实例是同一个,但是不能保证实例被多次实例化</span><br><span class="line"> * @date 2019/5/6 19:29</span><br><span class="line"> */</span><br><span class="line">public class CASSingleton &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 原子应用类,线程安全</span><br><span class="line">     */</span><br><span class="line">    private static final AtomicReference&lt;CASSingleton&gt; INSTANCE =  new AtomicReference&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 私有化构造方法</span><br><span class="line">     */</span><br><span class="line">    private CASSingleton()&#123;&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 获取单例类实例</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static CASSingleton getInstance()&#123;</span><br><span class="line">        for(;;)&#123;</span><br><span class="line">            CASSingleton singleton = INSTANCE.get();</span><br><span class="line">            if(null != singleton)&#123;</span><br><span class="line">                return singleton;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            singleton = new CASSingleton();</span><br><span class="line">            if(INSTANCE.compareAndSet(null,singleton))&#123;</span><br><span class="line">                return singleton;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //模拟多线程并发</span><br><span class="line">        int size = 10;</span><br><span class="line">        CyclicBarrier cyclicBarrier = new CyclicBarrier(size);</span><br><span class="line">        for (int i=0;i&lt;size;i++)&#123;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + &quot;到达循环栅栏前&quot;);</span><br><span class="line">                    cyclicBarrier.await();</span><br><span class="line">                    System.out.println(&quot;所有线程已经跨越循环栅栏,&quot; + Thread.currentThread().getName() + &quot;开始获取单例类实例:&quot; + getInstance());</span><br><span class="line">                &#125;catch (Exception e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<center> 更新中。。。
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2020/12/06/design-pattern-strategy/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在业务开发中，我们常常会遇到实现某一个功能有多种途径，每一条途径对应一种算法，此时我们可以使用一种设计模式来实现灵活地选择解决途径，也能够方便地增加新的解决途径；例如在微博中发布的一篇微博可能是文字，图片，转发的文章，转发的微博，投票或视频等；如果不使用设计模式实现这些功能那么代码一定会写的没有拓展性可言，新增一种类型就需要增加一层判断。本文将介绍一种为了适应算法灵活性而产生的设计模式-策略模式。<strong>本文为个人技术分享，可能有误望谅解</strong></p>
<h2 id="策略模式概述"><a href="#策略模式概述" class="headerlink" title="策略模式概述"></a>策略模式概述</h2><span id="more"></span>

<blockquote>
<p>在策略模式中，我们可以定义一些独立的类来封装不同的算法，每一个类封装一种具体的算法。在这里，每一个封装算法的类都可以称之为一个策略。为了保证这些策略在使用时具有一致性，一般会提供一个抽象的策略类来做规则的定义，而每种算法则对应于一个具体策略类。</p>
</blockquote>
<p>大致的意思就是将判断逻辑单独封装成一个策略类，这些策略类都有一个共同的抽象类，面向抽象类编程，这种编程方式符合“依赖倒转原则”，如果新增一种策略类，只需要新增一个抽象类的具体实现类即可，不需要再修改原有代码，符合“开闭原则”。原先所有的判断逻辑都放在一个类中，不符合“单一职责”，现在将每个判断逻辑拆分开来，封装到具体的策略类中，类的职责也得到分解。<br>策略模式结构如下图</p>
<p><img src="/images/design-pattern/strategy/strategy-pattern.png"></p>
<p>主要分为以下几个角色</p>
<ul>
<li>抽象策略类 Strategy 编程时客户端直接交互的角色</li>
<li>具体策略类 StrategyA StrategyB 具体的实现</li>
<li>策略工厂类 StrategyFactory 负责通过客户端传递的类型映射具体实现类</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在使用策略模式之前如果要实现一个查看微博详情的功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object <span class="title function_">getForwardContent</span><span class="params">(<span class="type">int</span> contentType,<span class="type">long</span> contentId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == contentType)&#123;</span><br><span class="line">            <span class="comment">//查询转发的文章详情</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">1</span> == contentType)&#123;</span><br><span class="line">            <span class="comment">//查询转发的微博详情</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">2</span> == contentType)&#123;</span><br><span class="line">            <span class="comment">//查询转发的图片详情</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">3</span> == contentType)&#123;</span><br><span class="line">            <span class="comment">//查询转发的视频详情</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">4</span> == contentType)&#123;</span><br><span class="line">            <span class="comment">//查询转发的投票详情</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;不支持的转发类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要拓展一个新的转发类型就必须要修改原有代码，后期维护十分困难。使用策略模式改写，先提取一个抽象策略类ForwardContent,再将每个查询详情封装成一个具体策略类，最后增加一个策略工厂类，保存转发内容类型和具体策略类的映射关系。</p>
<p><img src="/images/design-pattern/strategy/forward-content.png"></p>
<p>抽象策略类和具体实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象策略类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ForwardContent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发文章详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发微博详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发图片详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PictureForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发视频详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//转发投票详情</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoteForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getContent</span><span class="params">(<span class="type">long</span> contentId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>策略工厂类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardContentFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, ForwardContent&gt; FORWARD_CONTENT_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        FORWARD_CONTENT_MAP.put(<span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">ArticleForwardContent</span>());</span><br><span class="line">        FORWARD_CONTENT_MAP.put(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">PostForwardContent</span>());</span><br><span class="line">        FORWARD_CONTENT_MAP.put(<span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">PictureForwardContent</span>());</span><br><span class="line">        FORWARD_CONTENT_MAP.put(<span class="number">3</span>, <span class="keyword">new</span> <span class="title class_">VideoForwardContent</span>());</span><br><span class="line">        FORWARD_CONTENT_MAP.put(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">VoteForwardContent</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ForwardContent <span class="title function_">getForwardContent</span><span class="params">(<span class="type">int</span> contentType)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ForwardContent</span> <span class="variable">forwardContent</span> <span class="operator">=</span> FORWARD_CONTENT_MAP.get(contentType);</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> == forwardContent)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;不支持的转发类型&quot;</span> + contentType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> forwardContent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">contentId</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//查询转发文章详情</span></span><br><span class="line">        ForwardContentFactory.getForwardContent(<span class="number">0</span>).getContent(contentId);</span><br><span class="line">        <span class="comment">//查询转发微博详情</span></span><br><span class="line">        ForwardContentFactory.getForwardContent(<span class="number">1</span>).getContent(contentId);</span><br><span class="line">        <span class="comment">//查询转发图片详情</span></span><br><span class="line">        ForwardContentFactory.getForwardContent(<span class="number">2</span>).getContent(contentId);</span><br><span class="line">        <span class="comment">//查询转发视频详情</span></span><br><span class="line">        ForwardContentFactory.getForwardContent(<span class="number">3</span>).getContent(contentId);</span><br><span class="line">        <span class="comment">//查询转发投票详情</span></span><br><span class="line">        ForwardContentFactory.getForwardContent(<span class="number">4</span>).getContent(contentId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用策略模式改写后新增一种转发类型只需要新增一个具体实现类并且将它注册到工厂类即可，但是还是修改了原先的代码，代码拓展性的极致就是不修改一行代码。那么是否有方法做到不修改代码，答案是有的。JDK内置一种动态服务提供发现机制SPI，约定在classpath下的META-INF&#x2F;services目录下创建一个以服务接口命名的文件，然后文件里面记录的是此jar包提供的具体实现类的全限定名。这种方式可以做到不修改原来代码，如果新增一个具体实现类只需要在配置文件中新增一行记录即可。JAVA-SPI机制会加载所有实现类并全部实例化，如果使用这种方式的话就只多了修改配置这一操作，但还是有些繁琐，每次新增实现类都要记得修改配置类。那么是否存在更好的实现方式，那就是结合Spring实现策略模式。Spring几乎是每个项目中都在应用，这种方式也是比较推荐的一种。</p>
<h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>如果要结合Spring框架实现策略模式，那么就必须将所有的实现类都统一由Spinrg容器管理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PictureForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VideoForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoteForwardContent</span> <span class="keyword">implements</span> <span class="title class_">ForwardContent</span>&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>主要改进的地方是在策略工厂类，具体实现类注册到工厂类改为动态实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForwardContentFactory</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span>, ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, ForwardContent&gt; FORWARD_CONTENT_MAP = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ForwardContent <span class="title function_">getForwardContent</span><span class="params">(<span class="type">int</span> contentType)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ForwardContent</span> <span class="variable">forwardContent</span> <span class="operator">=</span> FORWARD_CONTENT_MAP.get(contentType);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == forwardContent) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;不支持的转发类型&quot;</span> + contentType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> forwardContent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//getBeansOfType()获取某个类所有由Spring管理的实现</span></span><br><span class="line">        applicationContext.getBeansOfType(ForwardContent.class).values()</span><br><span class="line">                .forEach(forwardContent -&gt; FORWARD_CONTENT_MAP.put(forwardContent.getContentType(), forwardContent));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="built_in">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>代码改进之后如果新增一个策略类只需要将其交由Spring管理即可，这种实现方式是目前发现的“最佳套路”。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>策略模式是应用较为广泛的设计模式之一，开发者都应该掌握，只要涉及到算法的封装，复用和切换都可以考虑使用策略模式。策略模式的主要优点是</p>
<ul>
<li>提供了对开闭原则的完美支持</li>
<li>使用策略模式可以避免多重条件选择语句</li>
<li>策略模式提供了一种算法的复用机制，在不同的场景都可以很方便地复用这些策略类</li>
</ul>
<p>主要缺点如下</p>
<ul>
<li>客户端需要知道所有的策略类，并自行决定使用哪一个策略类</li>
<li>策略模式将导致系统产生很多的策略类，任何细小的变化都将导致要增加一个新的具体策略类</li>
<li>无法同时使用多个策略类，也就是说每次只能使用一个策略类，不支持切换</li>
</ul>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><a href="https://gof.quanke.name/">刘伟(Sunny)-设计模式</a></li>
<li><a href="https://mp.weixin.qq.com/s/VA1_dEBpWN33WorJ3jhTqw">设计模式最佳套路—— 愉快地使用策略模式</a></li>
</ul>
]]></content>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计报告|全量用户通知未读数系统设计</title>
    <url>/2020/12/05/design-report-system-notify-unread/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发布系统公告是app的常见功能，运营人员在后台管理系统发布一篇公告，用户在使用app时会有红点或数字提示有未读消息，点击进入公告消息列表页后再返回红点或数字消失。本文将介绍一些关于<strong>全量用户通知未读数系统</strong>的技术设计方案，以及他们各自的优缺点，如果有更多的想法欢迎补充讨论。<strong>本文为个人技术分享，可能有误望谅解</strong></p>
<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><span id="more"></span>

<p>现要求为一款app增加查看系统发布公告历史记录功能，每个用户都可以进入历史记录列表页，未读的公告显示红点，已读的公告不显示红点，点击返回按钮再次进入列表页红点全部消失。</p>
<h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><p>首先根据需求分析，功能特点是全量用户共享数据，读取的是同一份数据，但需要知道一条公告消息哪些用户是已读，哪些是未读。要实现这样的一个功能，大致是需要三个接口</p>
<ul>
<li>后台管理系统发布公告接口</li>
<li>app用户查看公告历史记录列表接口</li>
<li>清空用户未读数接口</li>
</ul>
<p>得到接口列表后我们很快就可以设计出一种最简单的方案，存储全量用户公告消息。</p>
<h3 id="方案一：存储全量用户公告消息"><a href="#方案一：存储全量用户公告消息" class="headerlink" title="方案一：存储全量用户公告消息"></a>方案一：存储全量用户公告消息</h3><p>存储全量用户公告消息指的是运营人员在后台管理系统发布一篇公告，然后将公告数据推送给app全量用户，每个用户都存储一份公告数据，默认是未读，这种方式叫做推模式(写扩散)。一共会设计两张表，一张公告信息表，另一张是用户公告消息表，记录公告id和已读状态。采用这种方案理解起来也很简单，发布一篇公告，然后每个用户都存储一份公告消息数据，如果分页拉取历史记录列表，直接查询用户公告消息表判断是否已读显示红点，点击清空将所有的未读消息更改状态为已读。但是这种方案的缺点显而易见，每发布一篇公告都要推送给全量用户，假设系统用户有1千万，发布一篇公告的的数据存储成本是写入公告信息表1条数据和读取用户表全量数据写入用户公告消息表1千万条数据。写入会延迟很大并且数据存储成本太大并且这种设计方案很快就会被摒弃。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>理解简单，最容易想到，适用于企业内部管理系统</li>
</ul>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>发布一篇公告需要扩散给全量用户，延时很大</li>
<li>很多未登陆的用户都会存储一份数据，存储成本太大</li>
<li>如果公告消息有所变动还需要写扩散给所有用户</li>
<li>清空未读消息时，如果有很多未读消息，更新数据较多</li>
</ul>
<h3 id="方案二：存储全量用户已读公告消息"><a href="#方案二：存储全量用户已读公告消息" class="headerlink" title="方案二：存储全量用户已读公告消息"></a>方案二：存储全量用户已读公告消息</h3><p>全量用户如果都存储公告消息，那么存储成本会十分巨大，这会带来致命的问题。那么有没有优化的方案来改进存在的问题，存储全量用户公告消息读取全量用户和写入用户公告消息表时延会很大，那么如果只在用户公告消息表存储用户已读消息，那么就会避免读取全量用户和写入用户公告消息表。发布公告时只写入公告信息表，用户读取公告历史列表时分页查询公告信息表，再关联查询用户公告消息表，如果在里面则是已读，反之是未读。这样看起来写扩散最致命的两个问题都得到缓解，但是清空未读消息时就包含大量的写入操作，需要未读的数据写入用户公告消息表。</p>
<h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><ul>
<li>相对存储全量用户公告消息数据量较小</li>
</ul>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>实现较复杂</li>
<li>用户量增长或者活跃用户较多数据存储成本也会变大</li>
</ul>
<h3 id="方案三：存储全量用户最新读取公告消息-通用方案"><a href="#方案三：存储全量用户最新读取公告消息-通用方案" class="headerlink" title="方案三：存储全量用户最新读取公告消息(通用方案)"></a>方案三：存储全量用户最新读取公告消息(通用方案)</h3><p>以上方案都存在种种弊端，获取消息的延迟和数据存储成本这两个问题让人无法接受。方案再次改进，仔细分析需求，每个用户查看的系统公告都是同样的一份数据，前面已经提过，功能特点是全量用户共享数据，只是在共享数据层面加了一层已读未读状态，并且是批量将所有未读消息清空(如果需要支持点击单个消息已读则需要单独存储已读消息的id)，所以可以采用记录公告消息列表中每个人读取的最后一条消息的id，然后根据这个消息来判断哪些消息是已读，哪些消息是未读。该方案设计实现时存在几个关键点</p>
<ul>
<li>用户访问通知页面需要设置未读数为0，更新最近看过的通知为最新的一条消息id</li>
<li>如果用户最新看过的消息id为空，可根据业务需求判断是否全为已读</li>
</ul>
<p><img src="/images/design-report/system-notify.jpg"></p>
<h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><ul>
<li>数据存储量很小</li>
<li>清空未读消息性能较高，只需要更新用户最新读取的消息id即可</li>
</ul>
<h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li>实现较为复杂，不容易想到</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本文对实现全量用户通知未读数系统设计方案做了一个简要概述，如果在开发中遇到类似的应用场景基本上可以作为通用的方案。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>极客时间-高并发系统设计40问-38|计数系统设计(二)</li>
</ul>
]]></content>
      <tags>
        <tag>设计报告</tag>
      </tags>
  </entry>
  <entry>
    <title>jira服务搭建</title>
    <url>/2020/04/05/jira-build/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为搭建jira服务的教程,jira版本为jira8.3.0,如果需要搭建的jira服务版本与该文不符可能部分步骤需要调整。本文为原创分享,可能有误望谅解。</p>
<h2 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h2><ul>
<li>CentOS 64 Bit</li>
<li>JDK1.8</li>
<li>MySQL5.7<span id="more"></span></li>
</ul>
<h2 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h2><p>安装jira之前需要提供java环境和MySQL,为jira服务创建数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqld [(none)]&gt; create database jira default character set utf8 collate utf8_bin;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysqld [(none)]&gt; grant all on jira.* to &#x27;jira&#x27;@&#x27;%&#x27; identified by &#x27;jirapasswd&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysqld [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>直接在服务器上下载jira服务,测试环境部署的是8.3.0版本,如果需要安装其他版本修改8.3.0即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载jira8.3.0的安装包</span></span><br><span class="line">wget https://product-downloads.atlassian.com/software/jira/downloads/atlassian-jira-software-8.3.0-x64.bin</span><br></pre></td></tr></table></figure>

<p>下载完成后为安装包增加运行权限,进行安装,安装配置步骤如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加运行权限</span></span><br><span class="line">chmod +x atlassian-jira-8.3.0-x64.bin</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行安装程序，进行安装：</span></span><br><span class="line">[root@SzfyTestServer ~] ./atlassian-jira-software-8.3.0-x64.bin</span><br><span class="line">Unpacking JRE ...</span><br><span class="line">Starting Installer ...</span><br><span class="line">Sep 29, 2018 8:23:26 PM java.util.prefs.FileSystemPreferences$2 run</span><br><span class="line">INFO: Created system preferences directory in java.home.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">o确定安装，c取消</span></span><br><span class="line">This will install JIRA Software 8.3.0 on your computer.</span><br><span class="line">OK [o, Enter], Cancel [c]</span><br><span class="line">o</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择1是使用默认安装路径，2为自定义安装,3为升级。</span></span><br><span class="line">Choose the appropriate installation or upgrade option.</span><br><span class="line">Please choose one of the following:</span><br><span class="line">Express Install (use default settings) [1], Custom Install (recommended for advanced users) [2, Enter], Upgrade an existing JIRA installation [3]</span><br><span class="line">1       </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装配置说明,http默认端口是8080,RMI端口是8085,在测试环境使用8082和8083代替</span></span><br><span class="line">有关JIRA软件安装位置和将使用的设置的详细信息。</span><br><span class="line">默认程序：/opt/atlassian/jira</span><br><span class="line">默认数据：/var/atlassian/application-data/jira</span><br><span class="line">HTTP端口：8080</span><br><span class="line">RMI端口：8005</span><br><span class="line">Details on where JIRA Software will be installed and the settings that will be used.</span><br><span class="line">Installation Directory: /opt/atlassian/jira</span><br><span class="line">Home Directory: /var/atlassian/application-data/jira</span><br><span class="line">HTTP Port: 8082</span><br><span class="line">RMI Port: 8003</span><br><span class="line">Install as service: Yes</span><br><span class="line">Install [i, Enter], Exit [e]</span><br><span class="line">i</span><br><span class="line"></span><br><span class="line">Extracting files ...</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">是否启动jira，不推荐直接启动，因为后面要添加jdbc的jar和破解的Jar包，不然中途还需重启，</span></span><br><span class="line">Please wait a few moments while JIRA Software is configured.</span><br><span class="line">Installation of JIRA Software 8.3.0 is complete</span><br><span class="line">Start JIRA Software 8.3.0 now?</span><br><span class="line">Yes [y, Enter], No [n]</span><br><span class="line">n</span><br><span class="line">Installation of JIRA Software 8.3.0 is complete</span><br><span class="line">Your installation of JIRA Software 8.3.0 is now ready.</span><br><span class="line">Finishing installation ...</span><br></pre></td></tr></table></figure>

<p>由于jira没有mysql驱动程序,所以安装后需要上传mysql驱动程序</p>
<ul>
<li>mysql驱动下载:<a href="/files/jira/mysql-connector-java-5.1.48-bin.jar" target="_blank">mysql-connector-java-5.1.48-bin.jar</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -a  mysql-connector-java-5.1.48-bin.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure>

<p>安装成功后需要对jira进行破解,破解jira需要替换一个破解jar包atlassian-extras-3.2.jar。jira8.3.0对应的破解jar是atlassian-extras-3.2.jar,其他版本的jira查找对应的破解。此破解工具有效期到2033年2月8日，把atlassian-extras-3.2.jar复制到&#x2F;opt&#x2F;atlassian&#x2F;jira&#x2F;atlassian-jira&#x2F;WEB-INF&#x2F;lib&#x2F;目录下。覆盖其默认文件。</p>
<ul>
<li>破解包下载:<a href="/files/jira/atlassian-extras-3.2.jar" target="_blank">atlassian-extras-3.2.jar</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -a atlassian-extras-3.2.jar /opt/atlassian/jira/atlassian-jira/WEB-INF/lib/</span><br></pre></td></tr></table></figure>

<p>替换atlassian-extras-3.2.jar后就可以启动jira,启动成功后就可以在浏览器输入<a href="http://ip:8082访问,web界面的配置可以参考https://blog.51cto.com/moerjinrong/2287899">http://ip:8082访问,web界面的配置可以参考https://blog.51cto.com/moerjinrong/2287899</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动jira</span></span><br><span class="line">service jira start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看jira服务是否启动成功</span></span><br><span class="line">ss -tnl | grep 8082</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jira日志</span></span><br><span class="line">/opt/atlassian/jira/logs/catalina.out</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭jira</span></span><br><span class="line">service jira stop</span><br></pre></td></tr></table></figure>

<h2 id="问题解决-Q-amp-A"><a href="#问题解决-Q-amp-A" class="headerlink" title="问题解决(Q&amp;A)"></a>问题解决(Q&amp;A)</h2><h4 id="Q1-使用service-jira-start命令无法找到jira服务"><a href="#Q1-使用service-jira-start命令无法找到jira服务" class="headerlink" title="Q1:使用service jira start命令无法找到jira服务"></a>Q1:使用service jira start命令无法找到jira服务</h4><p> A1:一般情况下不是ROOT用户安装的jira无法注册到service服务,使用&#x2F;opt&#x2F;atlassian&#x2F;jira&#x2F;bin&#x2F;start-jira.sh启动</p>
<h4 id="Q2-jira未破解成功"><a href="#Q2-jira未破解成功" class="headerlink" title="Q2:jira未破解成功"></a>Q2:jira未破解成功</h4><p>A2:jira未破解成功可能是atlassian-extras-3.2.jar未替换成功.检查&#x2F;opt&#x2F;atlassian&#x2F;jira&#x2F;atlassian-jira&#x2F;WEB-INF&#x2F;lib&#x2F;目录下的atlassian-extras-3.2.jar是否是替换的破解包</p>
<h4 id="Q3-无法连接到MySQL数据库"><a href="#Q3-无法连接到MySQL数据库" class="headerlink" title="Q3:无法连接到MySQL数据库"></a>Q3:无法连接到MySQL数据库</h4><p>A3:检查数据库连接信息是否正确,账号配置等是否有权限,阿里云RDS是否配置白名单等</p>
<h4 id="Q4-浏览器使用http-ip-8082无法访问"><a href="#Q4-浏览器使用http-ip-8082无法访问" class="headerlink" title="Q4:浏览器使用http://ip:8082无法访问"></a>Q4:浏览器使用<a href="http://ip:8082无法访问">http://ip:8082无法访问</a></h4><p>A4:检查阿里云ECS安全组是否开放8082端口</p>
]]></content>
  </entry>
  <entry>
    <title>Headleass Chrome使用教程</title>
    <url>/2020/04/11/headless-chrome/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文介绍Google的一款无头浏览器headless chrome,无头浏览器的应用场景一般用在自动化测试,爬虫开发,自动截图等,网络爬虫开发在不考虑性能的情况下一般会借助无头浏览器来抓取。本文为原创分享,可能有误望谅解。</p>
<h2 id="本地使用headless-chrome"><a href="#本地使用headless-chrome" class="headerlink" title="本地使用headless chrome"></a>本地使用headless chrome</h2><p>首先下载chromedriver,配置相关启动参数</p>
<span id="more"></span>

<ul>
<li>webdriver.chrome.driver:设置chromedriver路径,将下载好的chromedriver移动到这个目录下</li>
<li>–user-data-dir:用户数据存放目录,假设需要多开headless chrome则需要新建另一个目录用来区分不同账户</li>
<li>–profile-directory:配置文件存放目录,多开headless chrome也需要新建一个新的目录用来区分不同账户</li>
<li>–User-Agent:修改用户来源,反爬措施会检测到headless chrome的User-Agent</li>
<li>–headless:开启headless模式</li>
<li>–disable-gpu:官方文档建议使用,避免出现bug</li>
<li>–window-size&#x3D;1920,1080:设置分辨率</li>
<li>–remote-debugging-address&#x3D;0.0.0.0:设置远程调试地址,默认是本地回环地址127.0.0.1</li>
<li>–remote-debugging-port&#x3D;9222:设置远程调试端口</li>
</ul>
<blockquote>
<p>更多配置可以参考:<a href="https://peter.sh/experiments/chromium-command-line-switches">https://peter.sh/experiments/chromium-command-line-switches</a></p>
</blockquote>
<p>在pom.xml文件增加selenium依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.42.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>编写以下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">driverPath</span> <span class="operator">=</span> <span class="string">&quot;D:\\soft\\chromedriver.exe&quot;</span>;</span><br><span class="line">System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>,driverPath);</span><br><span class="line"></span><br><span class="line"><span class="type">ChromeOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeOptions</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">userDataDir</span> <span class="operator">=</span> <span class="string">&quot;D:\\Profile\\Profile1&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(userDataDir);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    file.mkdir();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">profileDir</span> <span class="operator">=</span> <span class="string">&quot;D:\\Profile\\profile1&quot;</span>;</span><br><span class="line">file = <span class="keyword">new</span> <span class="title class_">File</span>(profileDir);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">    file.mkdir();</span><br><span class="line">&#125;</span><br><span class="line">options.addArguments(<span class="string">&quot;--user-data-dir=&quot;</span> + userDataDir);</span><br><span class="line">options.addArguments(<span class="string">&quot;--profile-directory=&quot;</span> + profileDir);</span><br><span class="line">options.addArguments(<span class="string">&quot;--User-Agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--headless&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--disable-gpu&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--window-size=1920,1080&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--remote-debugging-address=0.0.0.0&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--remote-debugging-port=9222&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">WebDriver</span> <span class="variable">headlessChromeDriver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>(options);</span><br><span class="line">headlessChromeDriver.manage().timeouts().implicitlyWait(<span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">headlessChromeDriver.get(<span class="string">&quot;https://www.baidu.com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>当你使用–remote-debugging-port&#x3D;9222运行Chrome他会启动一个支持<a href="https://chromedevtools.github.io/devtools-protocol">DevTool协议</a>的实例该协议用于与Chrome进行通信，并且驱动 Headless Chrome浏览器实例。它也是一个类似Sublime、VS Code 和 Node 的工具，可用于应用程序的远程调试。#协同效应<br/><br>启动程序后可以使用localhost:9222访问headless chrome的运行情况</p>
<p><img src="/images/chrome/headless/remote-debugging-1.png" alt="remote-debugging-1"></p>
<p>点击”百度一下,你就知道”则进入打开的百度窗口<br><img src="/images/chrome/headless/remote-debugging-2.png" alt="remote-debugging-2"></p>
<blockquote>
<p>DevTool Api:<a href="https://chromedevtools.github.io/devtools-protocol">https://chromedevtools.github.io/devtools-protocol</a></p>
</blockquote>
<h2 id="远程使用headless-chrome"><a href="#远程使用headless-chrome" class="headerlink" title="远程使用headless chrome"></a>远程使用headless chrome</h2><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><p>headless chrome除了可以运行在本地机器,还可以运行在远程机器,本地使用客户端调用。在服务端安装chromedriver,本地通过RemoteWebDriver调用服务端的chromedriver。</p>
<h2 id="搭建服务端环境"><a href="#搭建服务端环境" class="headerlink" title="搭建服务端环境"></a>搭建服务端环境</h2><p>服务端选用阿里云CentOS7机器,配置是1核2G，也可以使用windows机器,windows机器搭建和linux基本一致,直接进入相关链接下载对应的版本即可。</p>
<ul>
<li>安装chrome</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://dl.google.com/linux/chrome/rpm/stable/x86_64//google-chrome-stable-76.0.3809.100-1.x86_64.rpm</span><br><span class="line">yum localinstall google-chrome-stable-76.0.3809.100-1.x86_64.rpm</span><br></pre></td></tr></table></figure>

<ul>
<li>安装chromedriver</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://chromedriver.storage.googleapis.com/76.0.3809.25/chromedriver_linux64.zip</span><br><span class="line">unzip chromedriver_linux64.zip</span><br></pre></td></tr></table></figure>

<ul>
<li>下载selenium-server-standalone</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://selenium-release.storage.googleapis.com/2.42/selenium-server-standalone-2.42.1.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>启动selenium-server-standalone<br><code>启动selenium-server-standalone需要使用jdk,首先确保你的机器上可以使用java命令(建议使用jdk8),然后使用下列命令启动</code></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -Dwebdriver.chrome.driver=/usr/local/chromedriver -jar selenium-server-standalone-2.42.1.jar -port 4445</span><br></pre></td></tr></table></figure>

<p><code>其中-Dwebdriver.chrome.driver=/usr/local/chromedriver是指定chromedriver所在路径,必须保证和刚才下载的chromedriver所在路径保持一致。 -port 4445是启动端口,默认的启动端口是4444,因为在liunx环境下部分运营商会禁止一些端口的使用,其中就包含4444,所以这里需要指定一个自定义的端口。为了能够在后台启动所以使用下面的命令启动</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup java -Dwebdriver.chrome.driver=/usr/local/chromedriver -jar selenium-server-standalone-2.42.1.jar -port 4445 &gt;&gt; selenium-server-standalone.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p><code>输入启动命令后查看selenium-server-standalone.log文件,看到以下输出则是启动成功。#启动比较慢,耐心等待即可</code></p>
<p><img src="/images/chrome/headless/selenium-server-standalone-start.png" alt="selenium-server-standalone-start"></p>
<p><code>在浏览器地址栏输入http://yourip:4445/wd/hub即可看到以下输出,到这里服务端环境已经搭建成功。</code></p>
<p><img src="/images/chrome/headless/selenium-hub.png" alt="selenium-hub"></p>
<h3 id="客户端测试"><a href="#客户端测试" class="headerlink" title="客户端测试"></a>客户端测试</h3><p>客户端直接使用windows环境测试,编写以下代码,ChromeOptions设置和headless chrome本地运行类似</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ChromeOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeOptions</span>();</span><br><span class="line">options.addArguments(<span class="string">&quot;--user-data-dir=/usr/local/selenium/data&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--profile-directory=/usr/local/selenium/profile&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--User-Agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--headless&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--disable-gpu&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--window-size=1920,1080&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--remote-debugging-address=0.0.0.0&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--remote-debugging-port=9222&quot;</span>);</span><br><span class="line">options.addArguments(<span class="string">&quot;--no-sandbox&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">DesiredCapabilities</span> <span class="variable">desiredCapabilities</span> <span class="operator">=</span> DesiredCapabilities.chrome();</span><br><span class="line"><span class="comment">//启用性能日志</span></span><br><span class="line"><span class="type">LoggingPreferences</span> <span class="variable">logPrefs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingPreferences</span>();</span><br><span class="line">logPrefs.enable(LogType.PERFORMANCE, Level.ALL);</span><br><span class="line">desiredCapabilities.setCapability(CapabilityType.LOGGING_PREFS, logPrefs);</span><br><span class="line">desiredCapabilities.setCapability(ChromeOptions.CAPABILITY,options);</span><br><span class="line">RemoteWebDriver remoteHeadlessDriver;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    remoteHeadlessDriver = <span class="keyword">new</span> <span class="title class_">RemoteWebDriver</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://yourip:4445/wd/hub&quot;</span>),desiredCapabilities);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">remoteHeadlessDriver.get(https:<span class="comment">//www.baidu.com&quot;);</span></span><br><span class="line"><span class="comment">//记得最后关闭浏览器</span></span><br><span class="line">remoteHeadlessDriver.quit();</span><br></pre></td></tr></table></figure>

<p><code>运行客户端程序后,在浏览器地址栏输入http://yourip:4445/wd/hub即可查看chrome运行状态,点击Take Screenshot即可截屏远程headless chrome</code></p>
<p><img src="/images/chrome/headless/remote-headless-chrome.png" alt="remote-headless-chrome"></p>
<p><img src="/images/chrome/headless/remote-headless-chrome-screenshot.png" alt="remote-headless-chrome-screenshot"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于headless chrome的使用教程介绍到这里差不多就结束了,本文只介绍如何运行headless chrome,关于API的使用可自行阅读官方文档等资料。</p>
]]></content>
  </entry>
  <entry>
    <title>opencv的环境配置</title>
    <url>/2019/05/14/opencv-configure/</url>
    <content><![CDATA[<h1 id="opencv的环境配置"><a href="#opencv的环境配置" class="headerlink" title="opencv的环境配置"></a><center>opencv的环境配置</h1><p>最近由于工作原因有机会学习一下opencv,在本地开发测试通过将要发布时,在linux环境opencv一直编译不成功,之后不断尝试编译安装不同版本,最后为了同时支持本地功能开发和linux编译成功,最后降级为2.4.11版本终于成功。</p>
<h2 id="一-开发环境安装opencv环境"><a href="#一-开发环境安装opencv环境" class="headerlink" title="一,开发环境安装opencv环境"></a>一,开发环境安装opencv环境</h2><ul>
<li>首先在opencv<a href="https://opencv.org/releases/">官网</a>找到特定的版本下载到本地,例如windows环境下载选择windows版本,由于演示所用的版本是2.4.11,所以下文linux安装演示所使用版本也是2.4.11;linux直接下载source编译安装即可.</li>
</ul>
<span id="more"></span>
<center> ![](/images/opencv/opencv-version.png)
</center>

<hr>
<ul>
<li>下载opencv完成后将会得到opencv-2.4.11.exe,双击解压缩获得一个文件opencv;新建一个maven项目,在项目根目录下新建一个opencv目录;找到opencv中build下的java目录,将里面的内容拷贝至你的项目新建目录下</li>
</ul>
<center>
![](/images/opencv/opencv-idea.png)
</center>

<hr>
<ul>
<li>修改maven项目的pom文件,将opencv-2411.jar包导入你的项目中<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引入opencv --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;opencv&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;opencv&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4.11&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;system&lt;/scope&gt;</span><br><span class="line">    &lt;systemPath&gt;$&#123;project.basedir&#125;/opencv/opencv-2411.jar&lt;/systemPath&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;build&gt;</span><br><span class="line">  &lt;plugins&gt;</span><br><span class="line">    &lt;!-- 打war包时将opencv的jar打到指定目录下 --&gt;</span><br><span class="line">    &lt;plugin&gt;</span><br><span class="line">      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.10&lt;/version&gt;</span><br><span class="line">      &lt;executions&gt;</span><br><span class="line">          &lt;execution&gt;</span><br><span class="line">              &lt;id&gt;copy-dependencies&lt;/id&gt;</span><br><span class="line">              &lt;phase&gt;compile&lt;/phase&gt;</span><br><span class="line">              &lt;goals&gt;</span><br><span class="line">                  &lt;goal&gt;copy-dependencies&lt;/goal&gt;</span><br><span class="line">              &lt;/goals&gt;</span><br><span class="line">              &lt;configuration&gt;</span><br><span class="line">                  &lt;outputDirectory&gt;$&#123;project.build.directory&#125;/$&#123;project.build.finalName&#125;/WEB-INF/lib&lt;/outputDirectory&gt;</span><br><span class="line">                  &lt;includeScope&gt;system&lt;/includeScope&gt;</span><br><span class="line">              &lt;/configuration&gt;</span><br><span class="line">          &lt;/execution&gt;</span><br><span class="line">      &lt;/executions&gt;</span><br><span class="line">    &lt;/plugin&gt;</span><br><span class="line">  &lt;/plugins&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<ul>
<li>在启动参数内添加-Djava.library.path&#x3D;$PROJECT_DIR$\opencv\x64,根据你的系统选择是x64还是x86</li>
<li>新建一个测试类Test,使用opencv对图片进行灰度化</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  import org.opencv.core.Core;</span><br><span class="line">  import org.opencv.core.Mat;</span><br><span class="line">  import org.opencv.highgui.Highgui;</span><br><span class="line">  import org.opencv.imgproc.Imgproc;</span><br><span class="line"></span><br><span class="line">  public class Test &#123;</span><br><span class="line">    static &#123;</span><br><span class="line">        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Mat image = Highgui.imread(&quot;D://opencv.png&quot;);</span><br><span class="line">        Mat imageGray = new Mat();</span><br><span class="line">        Imgproc.cvtColor(image,imageGray,Imgproc.COLOR_RGB2GRAY);</span><br><span class="line">        Highgui.imwrite(&quot;D://opencv-gray.png&quot;,imageGray);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果Test类可以正常运行可以得到一张灰度化后的图片</p>
<center>![](/images/opencv/opencv.png)
原图
</center>

<center>![](/images/opencv/opencv-gray.png)
灰度化后的图
</center>

<p>到这里已经可以在开发环境使用opencv了,更多教程可以参考官方文档.</p>
<h2 id="二-linux安装opencv环境"><a href="#二-linux安装opencv环境" class="headerlink" title="二,linux安装opencv环境"></a>二,linux安装opencv环境</h2><p>上文展示了如何在开发环境搭建opencv,但是在实际应用中需要在linux服务器上搭建。在liunx上搭建只需要安装一些依赖编译源码即可,下列教程演示如何安装opencv并且在war包可以正常使用opencv,war包部署在tomcat服务器。</p>
<ul>
<li>安装依赖<br>sudo yum groupinstall “Development Tools” -y</li>
</ul>
<p>sudo yum install gcc cmake gtk2-devel numpy pkgconfig -y</p>
<ul>
<li><p>安装ant<br>yum -y install ant</p>
</li>
<li><p>下载opencv压缩包(2.4.11版本安装成功)<br>wget <a href="https://github.com/opencv/opencv/archive/2.4.11.zip">https://github.com/opencv/opencv/archive/2.4.11.zip</a></p>
</li>
<li><p>在opencv目录下建立build目录并且切换到build目录</p>
</li>
<li><p>cmake编译<br>cmake -D CMAKE_BUILD_TYPE&#x3D;RELEASE -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local -DBUILD_TESTS&#x3D;OFF ..</p>
</li>
<li><p>make</p>
<ul>
<li>make -j8  这一步比较慢,需要等待一段时间,安心等待完成后执行下一步即可</li>
<li>sudo make install<br>成功后再build目录下的bin目录得到一个jar包</li>
</ul>
</li>
<li><p>在&#x2F;usr&#x2F;local&#x2F;share&#x2F;OpenCV&#x2F;java&#x2F; 下找到libopencv_java320.so和  opencv-320.jar两个文件,将他们复制到配置的java.library.path路径下</p>
</li>
<li><p>启动tomcat即可使用opencv</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>线上问题排查|Redis:连接未释放导致连接数超过最大值</title>
    <url>/2020/05/02/online-failure-Redis-max-clients/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近又遇见一个线上问题,就是Redis连接数达到最大值,导致服务无法获取连接,大量用户反馈APP无法登陆。经过一系列的排查最终定位到问题是使用Redis后没有关闭连接,导致无法获取连接。因为出现问题的服务并没有使用连接池,所以在每次使用后必须手动关闭连接,否则运行一段时间后服务连接必将被占满。本文为技术分享,可能有误望谅解。</p>
<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><span id="more"></span>

<p>线上服务日志出现大量的异常:ERR max number of clients reached</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">redis.clients.jedis.exceptions.JedisDataException: ERR max number of clients reached</span><br><span class="line">        at redis.clients.jedis.Protocol.processError(Protocol.java:<span class="number">117</span>)</span><br><span class="line">        at redis.clients.jedis.Protocol.process(Protocol.java:<span class="number">151</span>)</span><br><span class="line">        at redis.clients.jedis.Protocol.read(Protocol.java:<span class="number">205</span>)</span><br><span class="line">        at redis.clients.jedis.Connection.readProtocolWithCheckingBroken(Connection.java:<span class="number">297</span>)</span><br><span class="line">        at redis.clients.jedis.Connection.getStatusCodeReply(Connection.java:<span class="number">196</span>)</span><br><span class="line">        at redis.clients.jedis.BinaryClient.connect(BinaryClient.java:<span class="number">83</span>)</span><br><span class="line">        at redis.clients.jedis.Connection.sendCommand(Connection.java:<span class="number">100</span>)</span><br><span class="line">        at redis.clients.jedis.Connection.sendCommand(Connection.java:<span class="number">91</span>)</span><br><span class="line">        at redis.clients.jedis.BinaryClient.auth(BinaryClient.java:<span class="number">551</span>)</span><br><span class="line">        at redis.clients.jedis.BinaryJedis.auth(BinaryJedis.java:<span class="number">2048</span>)</span><br></pre></td></tr></table></figure>
<p>整个APP使用到Redis的接口也全都不可用,一看到ERR max number of clients reached就猜测是Redis使用后未关闭连接,因为并发请求量还达不到占满Redis连接数的地步,为了验证这一想法按照下面排查步骤一步一步执行。</p>
<h2 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h2><h3 id="Linux排查命令"><a href="#Linux排查命令" class="headerlink" title="Linux排查命令"></a>Linux排查命令</h3><p>首先介绍关于Linux的一些监控命令,如下图所示</p>
<p><img src="/images/online-failure/Redis/linux-command.jpg"></p>
<p>如果想知道服务所在机器和Redis服务建立多少连接可以使用<a href="https://man.linuxde.net/ss">ss</a>或<a href="https://man.linuxde.net/netstat">netstat</a>命令来查看。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ss -tn | grep 6379</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netstat -aln | grep 6379</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">搜索与Redis服务建立的socket连接,Redis默认端口是6379,如果是其他端口修改为对应的端口即可</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>同时也可以实时监控连接数的变化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">watch -n 1 -d &#x27;netstat -aln | grep 6379 | wc -l&#x27;</span><br></pre></td></tr></table></figure>

<p>通过以上命令就可以在你的机器上获取Redis连接数。</p>
<h3 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h3><p>在机器上使用watch命令搜索目前与Redis建立的连接数,发现连接数一直居高不下,而目前也没有特别多的用户访问,为了尽快恢复线上服务先重启再后续观察。目前的症状是服务运行一段时间后无法获取连接且访问量并不大,首先是去排查代码(如果有权限查看阿里云后台可以先使用Redis的client list命令查看目前客户端的连接信息)看是否有连接未正常关闭。在查看Redis的封装工具类后找到一处代码使用Redis后未关闭连接,如下所示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> getJedis();</span><br><span class="line"><span class="keyword">return</span> jedis.scard(key);</span><br></pre></td></tr></table></figure>

<p>在获取一个jedis连接后,直接调用了一个scard()方法,该方法是获取Redis的Set元素的个数。找到可能出现的问题后,先将此处代码改写,使用try()语法释放jedis连接:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> getJedis())&#123;</span><br><span class="line">    <span class="keyword">return</span> jedis.scard(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>try括号中的资源会在try语句执行完后自动释放,前提是这些可关闭的资源必须实现java.lang.AutoCloseable接口。查看Jedis的继承关系:</p>
<p><img src="/images/online-failure/Redis/jedis-uml.png"></p>
<p>在将jedis连接正常关闭后,继续使用watch命令查看机器连接数,恢复正常不再保持递增状态。</p>
<h3 id="Redis相关命令排查"><a href="#Redis相关命令排查" class="headerlink" title="Redis相关命令排查"></a>Redis相关命令排查</h3><p>如果能够使用Redis的一些命令,可以更快地排查到是哪一行代码没有释放连接。</p>
<ul>
<li>info clients命令:查看Redis连接客户端的信息,可以查看目前有多少客户端连接</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip:6379&gt;info clients</span><br><span class="line">&quot;# Clients</span><br><span class="line">connected_clients:2</span><br><span class="line">client_recent_max_input_buffer:2</span><br><span class="line">client_recent_max_output_buffer:0</span><br><span class="line">blocked_clients:0</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>client list命令:查看Redis连接客户端的具体信息</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip:6379&gt;client list</span><br><span class="line">&quot;id=230145929 addr=ip:48324 fd=3370 name= age=19907 idle=19907 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r traffic-control= cmd=scard type=user&quot;</span><br><span class="line">&quot;id=230145930 addr=ip:48327 fd=3371 name= age=19907 idle=19907 flags=N db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=0 obl=0 oll=0 omem=0 events=r traffic-control= cmd=scard type=user&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>在线上Redis服务使用client list命令后发现有大量的未释放连接,cmd&#x3D;scard这里可以看到是scard命令未释放,idle&#x3D;19907和age&#x3D;19907可以看到该命令存活时间达到19907秒。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在写代码时一定要注意资源的释放,否则很容易出现线上事故引起用户投诉;在改造成本不大的时候可以使用池化技术来优化系统,例如http连接池,数据库连接池等,自动管理连接避免出现未手动释放的情况,当然如果改造成本比较大时还是注意在每次使用后都要手动关闭!</p>
]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决爬虫带来的困扰？</title>
    <url>/2020/06/07/shield-spider/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于工作原因，笔者曾经做过一段时间的爬虫开发，所以对于一些常见的爬虫技巧也基本掌握，所以站在爬虫开发的角度来看它的对立面更具有针对性。如果对爬虫的一些开发技巧感兴趣也可以转到笔者总结的<a href="https://github.com/zdg39/Z-Spider">GitHub仓库</a>。本文为技术分享(纯手打)，可能有误望谅解。</p>
<h2 id="常见反爬虫措施"><a href="#常见反爬虫措施" class="headerlink" title="常见反爬虫措施"></a>常见反爬虫措施</h2><span id="more"></span>

<p>反爬虫主要在 <strong>屏蔽抓包</strong>，<strong>登录加密</strong>，<strong>使用验证码</strong>，<strong>用户行为检测</strong>，<strong>屏蔽自动化</strong> 这几个方面做一些措施。爬虫开发主要是分析你的网站或者app的Http请求，然后使用代码模拟发送http请求获取网站服务器的响应内容，对响应内容解析拿到想要的内容。由此可见爬虫开发的大体步骤如下:</p>
<ul>
<li>借助浏览器开发者工具或者抓包工具拿到http报文信息</li>
<li>分析http报文信息,请求参数是否加密，是否依赖上次请求响应内容，是否需要cookie或请求头等</li>
<li>编写代码构造抓包工具获取的http请求，解析响应内容</li>
</ul>
<p>在这几个步骤中可以每一步都可以对爬虫进行防范，下面我从各个端(客户端,h5端,服务端)可以采取的方法一一介绍。本文介绍的是防范爬虫的一些方向，具体的实现方案还需要开发者深入调研。</p>
<h2 id="客户端反爬"><a href="#客户端反爬" class="headerlink" title="客户端反爬"></a>客户端反爬</h2><h4 id="1-使用极验证码"><a href="#1-使用极验证码" class="headerlink" title="1.使用极验证码"></a>1.使用极验证码</h4><p>在客户端一些登录注册场景，可以给用户弹出一个登陆验证码，让用户每次登陆都需要通过验证码验证;如果是数字类验证码无疑会降低用户体验;市面上比较流行的是极验验证码，通过让用户拼图的方式来完成验证。目前最新的极验验证码似乎是收费，如果不考虑成本的话还是可以用这种方式来防止批量注册的爬虫，检验目前破解也需要一定时间成本。</p>
<h4 id="2-绕过http抓包"><a href="#2-绕过http抓包" class="headerlink" title="2.绕过http抓包"></a>2.绕过http抓包</h4><p>客户端的请求一般是借助抓包工具来拿到http请求信息，抓包工具原理是在客户端上配置抓包工具监听的端口，让所有的流量都经过抓包工具。下图是一款叫做mitmproxy的抓包工具的原理:</p>
<p><img src="/images/spider/mitmproxy.jpg"></p>
<p>知道抓包工具的原理，便会有对应的方式不让抓包工具抓到请求包;这种方式也是笔者从目前所在公司的Android开发得知，具体实现原理如果有兴趣可自行查找资料研究。</p>
<h4 id="3-检测设备是否启用代理"><a href="#3-检测设备是否启用代理" class="headerlink" title="3.检测设备是否启用代理"></a>3.检测设备是否启用代理</h4><p>知道抓包工具的原理后，就知道需要对设备开启代理抓包，如果app每次发送http请求前检测一下是否使用代理则能避免被抓包。</p>
<h4 id="4-代码混淆和加固"><a href="#4-代码混淆和加固" class="headerlink" title="4.代码混淆和加固"></a>4.代码混淆和加固</h4><p>app功能开发完后一般会编译打包然后发布到应用市场，拿到这个安装包后可以使用一些工具反编译得到原源代码;如果发布的安装包未经过处理这会带来很大风险，加密参数和算法很容易被直接拿到。</p>
<h4 id="5-证书锁定"><a href="#5-证书锁定" class="headerlink" title="5.证书锁定"></a>5.证书锁定</h4><p>为了传输安全，大多数app都会使用https协议和服务端通信，然而https协议同样可以被抓包工具抓包，在这种情况下可以使用证书锁定这种策略来屏蔽抓包。https建立连接部分流程如图:</p>
<p><img src="/images/spider/ssl.png"></p>
<p>在建立连接时，服务端会下发一个安全证书给客户端，服务端拿到这个证书会校验是否信任，如果不信任则不能建立连接。在app中修改代码只信任公司配置的安全证书，每次建立连接时校验证书是否是指定的公司证书，如果是其他抓包工具证书则不能建立连接这样就很好的屏蔽了抓包。但是这种方式带来的坏处是如果线上安全证书如果有所变动将影响所有的app用户，其中的风险需要开发者评估。</p>
<h4 id="6-检测Hook框架"><a href="#6-检测Hook框架" class="headerlink" title="6.检测Hook框架"></a>6.检测Hook框架</h4><p>爬虫开发中还有一种方式就是对app的函数进行Hook，Android平台常见的Hook框架 <strong>Xposed Installer</strong> 和 <strong>Cydia Substrate</strong>;具体的防范措施可以查看美团技术发布的<a href="https://tech.meituan.com/2018/02/02/android-anti-hooking.html">Android Hook技术防范漫谈</a>.IOS平台</p>
<h4 id="7-检测Appium框架"><a href="#7-检测Appium框架" class="headerlink" title="7.检测Appium框架"></a>7.检测Appium框架</h4><p>在爬虫开发中如果不能拿到http请求，最后的方法一般是采用自动化来获取信息。因为自动化这种方式相对发送http请求性能急剧下降，不到最后地步一般不采用。Appium框架可用于自动化测试，也可以用来爬虫开发，一般自动化近似于一个真实用户来请求，也可以不检测。但要确保系统不是只有一种措施来防范爬虫，比如通过Appium拿到一个加密参数或者cookie等数据就可以使用http请求，这种情况下也同样需要防范，具体检测方案有兴趣客户端开发者可以自行调研。</p>
<h2 id="h5端反爬"><a href="#h5端反爬" class="headerlink" title="h5端反爬"></a>h5端反爬</h2><h4 id="1-js-x2F-css混淆"><a href="#1-js-x2F-css混淆" class="headerlink" title="1.js&#x2F;css混淆"></a>1.js&#x2F;css混淆</h4><p>js混淆是为了让爬虫开发者不能直接通过分析js就可以构建一个http请求，加大逆向分析难度，可将一个加密参数或一个特殊的请求头等数据放在混淆的js中生成；css混淆是为了不让爬虫开发者拿到http响应后便直接可以解析。</p>
<h4 id="2-js反debug"><a href="#2-js反debug" class="headerlink" title="2.js反debug"></a>2.js反debug</h4><p>js中使用debugger可以在打开浏览器开发者工具后一直跳到这一行代码以达到不让爬虫开发分析js的目的。破解反debug也有很多方式例如使用mitmproxy截取js的内容然后将修改debugger，但聊胜于无，能起到一点防范作用也是可以采取的。</p>
<h4 id="3-cookie插件-不确定的方案"><a href="#3-cookie插件-不确定的方案" class="headerlink" title="3.cookie插件(不确定的方案)"></a>3.cookie插件(不确定的方案)</h4><p>在以往的爬虫开发经验中遇见过各式各样的反爬虫，其中有很多莫名其妙的问题。例如莫名其妙就会出现一个奇怪的cookie或其他参数，同时出现过一个奇怪的插件，于是便猜测是不是这个插件生成了cookie。这种防范措施不确定是不是有具体的方案，前端开发者如果有兴趣可自行调研。</p>
<h4 id="4-检测Selenium框架"><a href="#4-检测Selenium框架" class="headerlink" title="4.检测Selenium框架"></a>4.检测Selenium框架</h4><p>Selenium也是用于自动化的一项技术，爬虫开发无法通过逆向分析js来获得数据时一般使用自动化来完成抓取任务。一般Selenium也是可以被js检测到，通过Selenium启动的浏览器会带有一些Javascript变量，例如 <strong>Javascript变量</strong>，在非selenium环境下其值为undefined，而在selenium环境下，其值为true。js可以通过辨识这些变量来判断当前是不是Selenium环境，但当爬虫开发使用mitmproxy来篡改js，将检测Selenium环境的的js代码修改，这时检测失去作用，所以进阶的检测Selenium框架方案需要前端开发者深入调研。</p>
<h4 id="5-采用ActiveX控件加密登录"><a href="#5-采用ActiveX控件加密登录" class="headerlink" title="5.采用ActiveX控件加密登录"></a>5.采用ActiveX控件加密登录</h4><p>对于一些和钱相关的数据，对爬虫的防范再怎么重视也不为过。一般银行系统登录都会下载一个exe安装在本地，这有效地防范了爬虫，但也为用户带来困扰;如果数据十分重要，采用这种方式还是利大于弊的，就是需要额外编写一个控件。</p>
<h2 id="服务端反爬"><a href="#服务端反爬" class="headerlink" title="服务端反爬"></a>服务端反爬</h2><h4 id="1-业务防刷"><a href="#1-业务防刷" class="headerlink" title="1.业务防刷"></a>1.业务防刷</h4><p>一般app都会有一个用户模块，用户登录后才能使用，每个用户都会对应一个userId，可以根据userId来限制请求次数。</p>
<h4 id="2-cookie管理"><a href="#2-cookie管理" class="headerlink" title="2.cookie管理"></a>2.cookie管理</h4><p>服务端可以未每个cookie的属性都赋值，不使用默认缺省值；对每个请求都设置相应的name，path等属性，这种方案需要结合系统服务端登录实现方式，如果不需要cookie登录，则不起作用。</p>
<p><img src="/images/spider/cookie.jpg"></p>
<h4 id="3-ip验证"><a href="#3-ip验证" class="headerlink" title="3.ip验证"></a>3.ip验证</h4><p>ip验证这种方式防范爬虫会降低一定的用户体验，具体实现是每隔30分钟就弹出验证码让用户校验，同时需要采用其他方案不能让爬虫破解验证码。</p>
<h4 id="4-ip并发限制和检测代理ip"><a href="#4-ip并发限制和检测代理ip" class="headerlink" title="4.ip并发限制和检测代理ip"></a>4.ip并发限制和检测代理ip</h4><p>服务端记录每个ip单位时间内并发请求量，达到阈值直接封ip；爬虫开发一般会使用代理ip来请求，要拿到最初的ip进行记录；同时也可以检测是否使用了代理，如果是通过代理ip访问则拒绝访问。</p>
<h4 id="5-检测Referer和UserAgent等请求头"><a href="#5-检测Referer和UserAgent等请求头" class="headerlink" title="5.检测Referer和UserAgent等请求头"></a>5.检测Referer和UserAgent等请求头</h4><p>在正常的用户访问中，http请求一般会带有Referer请求头，这时可以检测Refere是否正常，一般一个请求只会由特定的页面切换，如果是其它页面则说明存在爬虫嫌疑。UserAgent也可以进行检测，具体检测短时间UserAgent访问多次，同一个用户不停切换UserAgent都存在是爬虫的嫌疑。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>爬虫与反爬虫的博弈是一直没有尽头的，一方有新的技术另一方总有新的解决方案。本文介绍的是笔者在从事爬虫开发工作中所遇见的一些反爬措施，不一定准确但能让读者大致熟悉常见的一些反爬措施，为开发者防范爬虫起到一些启发。</p>
]]></content>
      <tags>
        <tag>系统安全</tag>
      </tags>
  </entry>
  <entry>
    <title>线上问题排查|MySQL:并发查询timestamp导致CPU使用率飙升</title>
    <url>/2019/12/22/online-failure-MySQL-timestamp/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇见一个很奇怪的线上问题,就是生产环境MySQL(使用的是阿里云的RDS,版本号是5.7)的CPU莫名其妙地会被打满,导致整个服务不可用,最终耗费了很大的精力才定位到出现这个问题的原因。出现这类现象是因为当MySQL的time_zone&#x3D;SYSTEM时,查询timestamp时会调用系统时区做时区转换,而系统时区存在全局锁,在并发大数据量访问会导致线程上下文频繁切换CPU使用率飙升,系统响应变慢。在排查问题时也在网上找了很多资料,但大都不是同一种问题,所以为这次排查做一次分享。本文为技术分享,可能有误望谅解。</p>
<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>出现这个问题的业务逻辑是查询一张存储用户搜索词的表,统计出最近七天搜索最多的几个关键词。在正常情况下查询正常,如果并发量增加RDS的CPU使用率飙升并且出现慢查询,这条SQL耗时能达到10s以上。表中的数据在20w左右,存在一个联合索引,正常查询会走索引,数据表的表结构如下:</p>
<span id="more"></span>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span>只列出了两个需要查询的字段<span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_search_keywords` (</span><br><span class="line">  `keywords` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;搜索关键字&#x27;</span>,</span><br><span class="line">  `t_crt_tm` <span class="type">timestamp</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  KEY `idx_keywords_tcrttm` (`keywords`,`t_crt_tm`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 ROW_FORMAT<span class="operator">=</span><span class="keyword">DYNAMIC</span> COMMENT<span class="operator">=</span><span class="string">&#x27;搜索关键字表&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用的查询语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	a.keywords</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">	(</span><br><span class="line">		<span class="keyword">SELECT</span></span><br><span class="line">			k.keywords,</span><br><span class="line">			<span class="built_in">count</span>(<span class="number">1</span>) c</span><br><span class="line">		<span class="keyword">FROM</span></span><br><span class="line">			tb_search_keywords k</span><br><span class="line">		<span class="keyword">WHERE</span></span><br><span class="line">			DATE_SUB(CURDATE(), <span class="type">INTERVAL</span> <span class="number">7</span> <span class="keyword">DAY</span>) <span class="operator">&lt;=</span> k.t_crt_tm</span><br><span class="line">		<span class="keyword">AND</span> LENGTH(k.keywords) <span class="operator">&gt;</span> <span class="number">3</span></span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">			k.keywords</span><br><span class="line">	) a</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">	a.c <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">8</span></span><br></pre></td></tr></table></figure>

<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>为了复现问题,首先将线上的20w数据导入测试环境(测试环境的MySQL没有使用阿里云的RDS机器,而是搭建在应用服务器上),然后对查询接口进行压测,开启20个线程请求测试环境,mysqld的CPU使用率马上就飙升,出现了和生产环境一样的问题。</p>
<p><img src="/images/online-failure/MySQL-timestamp/mysqld-cpu.png"></p>
<h2 id="排查步骤"><a href="#排查步骤" class="headerlink" title="排查步骤"></a>排查步骤</h2><p>首先连接上数据库,使用show processlist命令查看当前正在运行的线程,发现大量的查询处于sending data状态,sending data状态是正在读取和处理一个select语句的行，并发送数据到客户端，因为可能会发生物理读，该状态可能是给定生命周期时间最长的。</p>
<blockquote>
<p>show processlist查看正在运行的线程，如果你有process权限，能够看到所有的线程，如果没有权限只能看到自己的线程</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show processlist;</span></span><br><span class="line">+-----+---------------+-----------------------+-------------------+---------+------+--------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Id  | User          | Host                  | db                | Command | Time | State        | Info                                                                                                 |</span><br><span class="line">+-----+---------------+-----------------------+-------------------+---------+------+--------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">|   3 | dbName | ip:55094   | dbName_new | Sleep   |  958 |              | NULL                                                                                                 |</span><br><span class="line">|  43 | dbName | ip:55434   | dbName_new | Sleep   |  364 |              | NULL                                                                                                 |</span><br><span class="line">| 619 | dbName | ip:64008 | NULL              | Sleep   | 1345 |              | NULL                                                                                                 |</span><br><span class="line">| 620 | dbName | ip:64009 | dbName_new | Sleep   | 1320 |              | NULL                                                                                                 |</span><br><span class="line">| 627 | dbName | ip:64098 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 632 | dbName | ip:64220 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 633 | dbName | ip:64221 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 634 | dbName | ip:64222 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 635 | dbName | ip:64223 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 636 | dbName | ip:64224 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 637 | dbName | ip:64225 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 638 | dbName | ip:64226 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 639 | dbName | ip:64227 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 640 | dbName | ip:64228 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 641 | dbName | ip:64249 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 642 | dbName | ip:64250 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 643 | dbName | ip:64256 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 644 | dbName | ip:64264 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 645 | dbName | ip:64287 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 646 | dbName | ip:64288 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 647 | dbName | ip:64289 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 648 | dbName | ip:64290 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 649 | dbName | ip:64295 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 650 | dbName | ip:64298 | dbName_new | Query   |    2 | Sending data | SELECT a.keywords FROM (SELECT k.keywords,count(1) c FROM tb_search_keyw |</span><br><span class="line">| 657 | dbName | localhost             | dbName_new | Query   |    0 | starting     | show processlist                                                                                     |</span><br><span class="line">+-----+---------------+-----------------------+-------------------+---------+------+--------------+------------------------------------------------------------------------------------------------------+</span><br><span class="line">25 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>接下来使用show profile查看详细的查询耗时,使用show profile需要使用set profiling&#x3D;1打开配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">set</span> profiling=1;</span></span><br><span class="line">Query OK, 0 rows affected, 1 warning (0.00 sec)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show profiles;</span></span><br><span class="line">Empty set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>将异常的sql执行一次,再使用show profiles;得到query_id</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">SELECT a.keywords FROM(SELECT k.keywords,count(1) c FROM tb_search_keywords k WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= k.t_crt_tm AND LENGTH(k.keywords) &gt; 3 GROUP BY k.keywords) a ORDER BY a.c DESC LIMIT 8;</span></span><br><span class="line">+----------+</span><br><span class="line">| keywords |</span><br><span class="line">+----------+</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">| xxxxx    |</span><br><span class="line">+--------------+</span><br><span class="line">8 rows in set (2.72 sec)</span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show profiles;                                                                                                                                     +----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span></span><br><span class="line">| Query_ID | Duration   | Query                                                                                                                                                                                                             |</span><br><span class="line">+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">|        1 | 2.71795375 | SELECT a.keywords FROM(SELECT k.keywords,count(1) c FROM tb_search_keywords k WHERE DATE_SUB(CURDATE(), INTERVAL 7 DAY) &lt;= k.t_crt_tm AND LENGTH(k.keywords) &gt; 3 GROUP BY k.keywords) a ORDER BY a.c DESC LIMIT 8 |</span><br><span class="line">+----------+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>得到query_id后使用show profile all for query Query_ID查看语句工作情况和耗时,很明显sending data状态的Context_voluntary的值十分大,达到了1223336,Context_voluntary指的时上下文主动切换次数,一般是越小越好。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show profile all <span class="keyword">for</span> query 1;</span></span><br><span class="line">+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+</span><br><span class="line">| Status               | Duration | CPU_user | CPU_system | Context_voluntary | Context_involuntary | Block_ops_in | Block_ops_out | Messages_sent | Messages_received | Page_faults_major | Page_faults_minor | Swaps | Source_function       | Source_file          | Source_line |</span><br><span class="line">+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+</span><br><span class="line">| starting             | 0.000178 | 0.000270 |   0.000369 |                44 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | NULL                  | NULL                 |        NULL |</span><br><span class="line">| checking permissions | 0.000013 | 0.000019 |   0.000026 |                 3 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | check_access          | sql_authorization.cc |         810 |</span><br><span class="line">| Opening tables       | 0.000031 | 0.000053 |   0.000072 |                 8 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | open_tables           | sql_base.cc          |        5650 |</span><br><span class="line">| init                 | 0.000084 | 0.000143 |   0.000197 |                25 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | handle_query          | sql_select.cc        |         121 |</span><br><span class="line">| System lock          | 0.000016 | 0.000026 |   0.000035 |                 5 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_lock_tables     | lock.cc              |         323 |</span><br><span class="line">| optimizing           | 0.000009 | 0.000017 |   0.000024 |                 3 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         151 |</span><br><span class="line">| optimizing           | 0.000017 | 0.000025 |   0.000034 |                 3 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         151 |</span><br><span class="line">| statistics           | 0.000086 | 0.000146 |   0.000199 |                33 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         367 |</span><br><span class="line">| preparing            | 0.000026 | 0.000043 |   0.000059 |                 5 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         475 |</span><br><span class="line">| Sorting result       | 0.000007 | 0.000012 |   0.000017 |                 1 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | make_tmp_tables_info  | sql_select.cc        |        3829 |</span><br><span class="line">| statistics           | 0.000008 | 0.000013 |   0.000018 |                 2 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         367 |</span><br><span class="line">| preparing            | 0.000007 | 0.000011 |   0.000015 |                 2 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | optimize              | sql_optimizer.cc     |         475 |</span><br><span class="line">| Sorting result       | 0.000006 | 0.000011 |   0.000015 |                 3 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | make_tmp_tables_info  | sql_select.cc        |        3829 |</span><br><span class="line">| executing            | 0.000012 | 0.000020 |   0.000026 |                 3 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | exec                  | sql_executor.cc      |         119 |</span><br><span class="line">| Sending data         | 0.000010 | 0.000018 |   0.000026 |                 2 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | exec                  | sql_executor.cc      |         195 |</span><br><span class="line">| executing            | 0.000015 | 0.000000 |   0.000052 |                10 |                   1 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | exec                  | sql_executor.cc      |         119 |</span><br><span class="line">| Sending data         | 2.716164 | 4.374872 |   6.204002 |           1223336 |                4957 |            0 |            16 |             0 |                 0 |                 0 |               497 |     0 | exec                  | sql_executor.cc      |         195 |</span><br><span class="line">| Creating sort index  | 0.001164 | 0.000489 |   0.000672 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 1 |     0 | sort_table            | sql_executor.cc      |        2595 |</span><br><span class="line">| end                  | 0.000019 | 0.000003 |   0.000005 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | handle_query          | sql_select.cc        |         199 |</span><br><span class="line">| query end            | 0.000011 | 0.000005 |   0.000006 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_execute_command | sql_parse.cc         |        4965 |</span><br><span class="line">| closing tables       | 0.000003 | 0.000001 |   0.000002 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_execute_command | sql_parse.cc         |        5017 |</span><br><span class="line">| removing tmp table   | 0.000013 | 0.000006 |   0.000007 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | free_tmp_table        | sql_tmp_table.cc     |        2401 |</span><br><span class="line">| closing tables       | 0.000008 | 0.000003 |   0.000005 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | free_tmp_table        | sql_tmp_table.cc     |        2430 |</span><br><span class="line">| freeing items        | 0.000032 | 0.000014 |   0.000018 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | mysql_parse           | sql_parse.cc         |        5622 |</span><br><span class="line">| cleaning up          | 0.000017 | 0.000006 |   0.000010 |                 0 |                   0 |            0 |             0 |             0 |                 0 |                 0 |                 0 |     0 | dispatch_command      | sql_parse.cc         |        1898 |</span><br><span class="line">+----------------------+----------+----------+------------+-------------------+---------------------+--------------+---------------+---------------+-------------------+-------------------+-------------------+-------+-----------------------+----------------------+-------------+</span><br><span class="line">25 rows in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>到这里已经差不多快接近定位到是由于什么原因了,只要知道是什么会导致Context_voluntary偏大,经过不断地查找资料,终于找到<a href="http://blog.elight.cn/?post=326">一篇细说MySQL的timestamp的文章</a>。<br>文中指出:当MySQL参数time_zone&#x3D;system时，查询timestamp字段会调用系统时区做时区转换，而由于系统时区存在全局锁问题，在多并发大数据量访问时会导致线程上下文频繁切换，CPU使用率暴涨，系统响应变慢设置假死。<br>查到可能的原因马上尝试一番,使用show variables like ‘%time_zone’命令查看time_zone的值,果不其然time_zone的值是SYSTEM。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">show variables like <span class="string">&#x27;%time_zone&#x27;</span>;</span></span><br><span class="line">+------------------+--------+</span><br><span class="line">| Variable_name    | Value  |</span><br><span class="line">+------------------+--------+</span><br><span class="line">| system_time_zone | CST    |</span><br><span class="line">| time_zone        | SYSTEM |</span><br><span class="line">+------------------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>因为mysqld进程是在应用服务器上,可以使用linux的<a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/pstack.html">pstack</a>命令来查看各个线程的状态,也很容易看到是因为时区转换存在全局锁,pstack信息如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Thread 2 (Thread 0x7fc5a702c700 (LWP 11259)):</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">0  0x00007fc5dd03a57c <span class="keyword">in</span> __lll_lock_wait_private () from /lib64/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1  0x00007fc5dcfe4c5c <span class="keyword">in</span> _L_lock_2546 () from /lib64/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2  0x00007fc5dcfe4a97 <span class="keyword">in</span> __tz_convert () from /lib64/libc.so.6</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3  0x0000000000d76c81 <span class="keyword">in</span> Time_zone_system::gmt_sec_to_TIME (this=&lt;optimized out&gt;, tmp=0x7fc5a7029f00, t=&lt;optimized out&gt;) at /export/home2/pb2/build/sb_1-26514852-1514433675.01/rpm/BUILD/mysql-5.7.21/mysql-5.7.21/sql/tztime.cc:1094</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4  0x00000000007d554d <span class="keyword">in</span> gmt_sec_to_TIME (tv=..., tmp=0x7fc5a7029f00, this=&lt;optimized out&gt;) at /export/home2/pb2/build/sb_1-26514852-1514433675.01/rpm/BUILD/mysql-5.7.21/mysql-5.7.21/sql/tztime.h:60</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5  Field_timestampf::get_date_internal (this=&lt;optimized out&gt;, ltime=0x7fc5a7029f00) at /export/home2/pb2/build/sb_1-26514852-1514433675.01/rpm/BUILD/mysql-5.7.21/mysql-5.7.21/sql/field.cc:5986</span></span><br></pre></td></tr></table></figure>
<p>搜索__tz_convert发现19个线程都是处于请求锁的状态,前文提到使用了20个线程对接口压测,则证明了是存在锁。</p>
<p><img src="/images/online-failure/MySQL-timestamp/mysqld-stack.png"></p>
<h2 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h2><h4 id="一-将time-zone参数设置为system外的值，如中国地区服务器设置为’-8-00’；"><a href="#一-将time-zone参数设置为system外的值，如中国地区服务器设置为’-8-00’；" class="headerlink" title="一:将time_zone参数设置为system外的值，如中国地区服务器设置为’+8:00’；"></a>一:将time_zone参数设置为system外的值，如中国地区服务器设置为’+8:00’；</h4><ul>
<li>修改time_zone是最直接的方式,这样就不会访问linux的系统时区,不会存在锁</li>
<li>修改time_zone在业务场景对时区有要求时不适用</li>
</ul>
<h4 id="二-使用datetime代替timestamp"><a href="#二-使用datetime代替timestamp" class="headerlink" title="二:使用datetime代替timestamp"></a>二:使用datetime代替timestamp</h4>]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
